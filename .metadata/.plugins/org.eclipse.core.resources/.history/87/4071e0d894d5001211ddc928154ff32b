package com.teamteam.witherest;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AbsListView;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.teamteam.customComponent.SimpleProgress;
import com.teamteam.customComponent.SimpleProgressDialog;
import com.teamteam.witherest.common.AndroUtils;
import com.teamteam.witherest.common.CommonUtils;
import com.teamteam.witherest.lazyload.ImageLoader;
import com.teamteam.witherest.model.Session;
import com.teamteam.witherest.service.RoomService;
import com.teamteam.witherest.service.Service;
import com.teamteam.witherest.service.ServiceManager;
import com.teamteam.witherest.service.callback.RoomServiceCallback;
import com.teamteam.witherest.service.callback.object.BaseResponseObject;
import com.teamteam.witherest.service.callback.object.CheckRoomResponseObject;
import com.teamteam.witherest.service.callback.object.MyCheckResponseObject;
import com.teamteam.witherest.service.callback.object.RoomInfoResponseObject;
import com.teamteam.witherest.service.callback.object.MyCheckResponseObject.CheckRoom;
import com.teamteam.witherest.service.callback.object.RoomInfo;

public class Fragment_MyCheck extends Fragment implements RoomServiceCallback{
	
	public MyCheckResponseObject myCheckResponse;
	public ListView myCheckRoomLisView;
	private Activity activity;
	
	private View myCheckView;
	private TextView nameView;
	private TextView purposeView;
	private TextView myCheckStartView;
	private TextView myCheckExposeView;
	private ImageView profileImageView;
	private SimpleProgressDialog waitProgressDialog;
	
	public MyCheckListAdapter myCheckListAdapter;
	
	public int refreshPos;
	public TextView refeshBadge;
	
	public RoomService roomService;
	public ImageLoader imageLoader; 
	
	public int selectPosition;
	
	public static final String TAG=" Fragment_MyCheck";
	

	
	/* Fragment Life Cycle */
	
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		imageLoader = new ImageLoader(getActivity().getApplicationContext());
		Log.v("마이체크", "onAttach() 호출됨");
		this.activity = activity;
		roomService = ServiceManager.getServiceManager().getRoomService();
		roomService.setOnRoomCallback(this);
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Log.v("마이체크", "onCreate() 호출됨");
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		Log.v("마이체크", "onCreateView(() 호출됨");
		
		myCheckView = inflater.inflate(R.layout.fragment_mycheck, null);
		profileImageView = (ImageView)myCheckView.findViewById(R.id.mycheck_prifile_image);
		nameView= (TextView)myCheckView.findViewById(R.id.mycheck_name_textview);
		purposeView= (TextView)myCheckView.findViewById(R.id.mycheck_purpose_textview);
		
		myCheckStartView = (TextView)myCheckView.findViewById(R.id.mycheck_star_textview);
		myCheckExposeView = (TextView)myCheckView.findViewById(R.id.mycheck_expose_textview);
		myCheckRoomLisView = (ListView)myCheckView.findViewById(R.id.mycheck_checklistview);
		myCheckView.findViewById(R.id.make_room_btn).setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				if (Session.getInstance().sessionStatus == Session.NOT_AUTHORIZED){
					return;
				}
				Intent i = new Intent(activity, MakeRoomActivity.class);
				startActivity(i);
			}
		});
		
		nameView.setText(CommonUtils.null2empty(Session.getInstance().user.nickName));
		purposeView.setText(CommonUtils.null2empty(Session.getInstance().user.purpose));
		String url = null;
		if (!CommonUtils.isNullOrEmpty(Session.getInstance().user.profileImagePath)){
			url = Service.BASE_URL +  Session.getInstance().user.profileImagePath;
		}
		
		imageLoader.displayImage(url, profileImageView);
		return myCheckView;
	}
	
	
	public void loadMyCheckRooms(){
			waitProgressDialog = new SimpleProgressDialog(getActivity(), getActivity().getString(R.string.wait_title),
					getString(R.string.wait_message));
			waitProgressDialog.start();
			
			RoomService roomService = ServiceManager.getServiceManager().getRoomService();
			roomService.setOnRoomCallback(this);
			roomService.getMyCheckRooms(String.valueOf(Session.getInstance().user.userIndex));
	}
	
	public void onRoomServiceCallback(BaseResponseObject object) {
		SimpleProgressDialog.stop(waitProgressDialog);
		
		if (object.resultCode == Service.RESULT_FAIL) {
			AndroUtils.showToastMessage(getActivity(), object.requestType + " : " + object.resultMsg, Toast.LENGTH_SHORT);
			return;
		}
		
		switch(object.requestType){
		case Service.REQUEST_TYPE_GET_MY_CHECKROOMS:
			myCheckResponse = (MyCheckResponseObject)object;
			updateUi();
			setAdapter();
			break;
			
		case Service.REQUEST_TYPE_CHECK_ROOM:
			CheckRoomResponseObject checkRoomResponse = (CheckRoomResponseObject)object;
			myCheckResponse.roomList.get(refreshPos).checkedMemberCount = checkRoomResponse.checkedMemberCount;
			myCheckResponse.roomList.get(refreshPos).checked = true;
			updateBadge();
			break;
			
		case Service.REQUEST_TYPE_CANCEL_CHECK:
			CheckRoomResponseObject cancelCheckRoomResponse = (CheckRoomResponseObject)object;
			myCheckResponse.roomList.get(refreshPos).checkedMemberCount = cancelCheckRoomResponse.checkedMemberCount;
			myCheckResponse.roomList.get(refreshPos).checked = false;
			updateBadge();
			break;
			
		case Service.REQUEST_TYPE_GET_ROOMINFO:
			WitheState state = WitheState.getInstance();
			if (state.changeType == WitheState.CREATE_ROOM){
				RoomInfo roomInfo = ((RoomInfoResponseObject)object).roomInfo;
				addRoom(roomInfo);
			}else if (state.changeType == WitheState.MODIFY_ROOM){
				RoomInfo roomInfo = ((RoomInfoResponseObject)object).roomInfo;
				modifyRoom(roomInfo);
			}
			break;
		}
	}
	
	public void updateUi(){
		if (CommonUtils.isNullOrEmpty(Session.getInstance().user.profileImagePath)){
			imageLoader.displayImage(Session.getInstance().user.profileImagePath,profileImageView);
		}
		myCheckExposeView.setText(myCheckResponse.createRoomCount + " / " + myCheckResponse.joinRoomCount);
		myCheckStartView.setText(myCheckResponse.userStarCount+"");
		WitheState.getInstance().init();
	}
	
	public void setAdapter(){
		myCheckListAdapter = new MyCheckListAdapter(activity,R.layout.mycheck_list_item_row, 
				myCheckResponse.roomList, imageLoader);
		myCheckRoomLisView.setAdapter(myCheckListAdapter);
	}
	
	
	public void updateBadge(){
		boolean  isRoomCompleted = myCheckResponse.roomList.get(refreshPos).checkedMemberCount >=myCheckResponse.roomList.get(refreshPos)
			.curMemberCount;
		refeshBadge.setBackgroundResource(isRoomCompleted? R.drawable.main_checknumber_complete_bg:R.drawable.main_checknumber_bg);
		refeshBadge.setPadding(1, 1, 1,1);
		refeshBadge.setText(CommonUtils.int2string( myCheckResponse.roomList.get(refreshPos).checkedMemberCount));
	}
	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		Log.v("마이체크", "onViewCreated() 호출됨");
		
	}
	
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		Log.v("마이체크", "onActivityCreated() 호출됨");
		if (savedInstanceState != null){
			myCheckRoomLisView.setSelectionFromTop(savedInstanceState.getInt("position"), 0);			
		}
	}
	
	
	@Override
	public void onResume() {
		super.onResume();
		WitheState state = WitheState.getInstance();
		
		if (myCheckResponse != null){
			if(WitheState.getInstance().haveChanged){
				if (state.mustOneLoaded && state.id != WitheState.INVALID_ID){
					getRoomById(state.id);
				}else if (state.mustOneDeleted && state.id != WitheState.INVALID_ID){
					deleteRoomFromList(state.id);
				}else if (state.mustOneModified && state.id != WitheState.INVALID_ID){
					getRoomById(state.id);
				}
			}else {
				updateUi();
				setAdapter();
			}
		}else {
			loadMyCheckRooms();
		}
	}

	public void addRoom(RoomInfo roomInfo){
		ArrayList<CheckRoom> roomList = myCheckResponse.roomList;
		
		CheckRoom checkRoom = new CheckRoom();
		checkRoom.roomId = roomInfo.roomId;
		checkRoom.roomOwner = Session.getInstance().user.userIndex;
		checkRoom.roomTitle = roomInfo.roomTitle;
		checkRoom.roomPurpose = roomInfo.roomPurpose;
		checkRoom.roomImagePath = roomInfo.roomImagePath;
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		checkRoom.startDate = format.format(roomInfo.startDate);
		checkRoom.endDate = format.format(roomInfo.endDate);
		checkRoom.checkedMemberCount = 0;
		checkRoom.maxMemberCount = roomInfo.maxMemberCount;
		checkRoom.curMemberCount = 1;
		checkRoom.checked = false;
		checkRoom.alarmTime = roomInfo.alarmHour + ":" + roomInfo.alarmMin;
		checkRoom.alarmLevel = roomInfo.alarmLevel;
		
		if (WitheState.getInstance().changeType == WitheState.CREATE_ROOM){
			myCheckResponse.createRoomCount = myCheckResponse.createRoomCount + 1;	
		}else if (WitheState.getInstance().changeType == WitheState.JOIN_ROOM){
			myCheckResponse.joinRoomCount = myCheckResponse.joinRoomCount +1;
		}else if (WitheState.getInstance().changeType == WitheState.LEAVE_ROOM){
			myCheckResponse.joinRoomCount = myCheckResponse.joinRoomCount -1;
		}
		updateUi();
		roomList.add(checkRoom);
		refreshList();
		myCheckRoomLisView.setSelection(myCheckListAdapter.getCount()-1);
	}
	
	private void modifyRoom(RoomInfo roomInfo) {
		ArrayList<CheckRoom> roomList = myCheckResponse.roomList;
		int modifyRoomNo = -1;
		for (int i =0; i <roomList.size(); i++ ){
			CheckRoom checkRoom = roomList.get(i);
			if (checkRoom.roomId == roomInfo.roomId){
				modifyRoomNo = i;
				break;
			}
		}
		CheckRoom checkRoom = roomList.get(modifyRoomNo);
		
		checkRoom.roomId = roomInfo.roomId;
		checkRoom.roomOwner = Session.getInstance().user.userIndex;
		checkRoom.roomTitle = roomInfo.roomTitle;
		checkRoom.roomPurpose = roomInfo.roomPurpose;
		checkRoom.roomImagePath = roomInfo.roomImagePath;
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		checkRoom.startDate = format.format(roomInfo.startDate);
		checkRoom.endDate = format.format(roomInfo.endDate);
		checkRoom.checkedMemberCount = 0;
		checkRoom.maxMemberCount = roomInfo.maxMemberCount;
		checkRoom.curMemberCount = 1;
		checkRoom.checked = false;
		checkRoom.alarmTime = roomInfo.alarmHour + ":" + roomInfo.alarmMin;
		checkRoom.alarmLevel = roomInfo.alarmLevel;
		
		updateUi();
		
		
	}

	private void deleteRoomFromList(int id) {
		ArrayList<CheckRoom> roomList = myCheckResponse.roomList;
		int deleteRoomNo = -1;
		for (int i =0; i <roomList.size(); i++ ){
			CheckRoom checkRoom = roomList.get(i);
			if (checkRoom.roomId == id){
				deleteRoomNo = i;
				break;
			}
		}
		if (deleteRoomNo !=-1){
			roomList.remove(deleteRoomNo);
			refreshList();
		}
	}
   
	private void refreshList() {
		myCheckListAdapter.notifyDataSetChanged();
	}

/*	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		Log.v(TAG,"onActivityResult 호출됨");
		if (resultCode != Activity.RESULT_OK)
			return;

		switch (requestCode) {
		case ActConstants.CREATE_ROOM:
			int roomId = data.getIntExtra("roomId",-1);
			if (roomId ==-1) return;
			getRoomById(roomId);
		break;
		}	
	}*/

	@Override
	public void onPause() {
		super.onResume();
		Log.v("마이체크", "onPause() 호출됨");
		selectPosition = myCheckRoomLisView.getFirstVisiblePosition();
	}
	
	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		 outState.putInt("position",selectPosition);
	}

	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		Log.v("마이체크", "onDestroy() 호출됨");
	}

	@Override
	public void onDestroyView() {
		// TODO Auto-generated method stub
		super.onDestroyView();
		Log.v("마이체크", "onDestroyView() 호출됨");
	}

	@Override
	public void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		Log.v("마이체크", "onStop() 호출됨");
	}

	@Override
	public void onDetach() {
		// TODO Auto-generated method stub
		super.onDetach();
		Log.v("마이체크", "onDetach() 호출됨");
	}

	public void getRoomById(int roomId){
		waitProgressDialog = new SimpleProgressDialog(getActivity(), getString(R.string.wait_title),getString(R.string.wait_message));
		waitProgressDialog.start();
		roomService.setOnRoomCallback(this);
		roomService.getRoomInfo(roomId);
	}
	
	public void checkRoom(int roomId){
		waitProgressDialog = new SimpleProgressDialog(getActivity(), getActivity().getString(R.string.wait_title),
				getString(R.string.wait_message));
		waitProgressDialog.start();
		
		RoomService roomService = ServiceManager.getServiceManager().getRoomService();
		roomService.setOnRoomCallback(this);
		roomService.checkRoom(roomId);
	}
	
	public void cancelCheck(int roomId){
		waitProgressDialog = new SimpleProgressDialog(getActivity(), getActivity().getString(R.string.wait_title),
				getString(R.string.wait_message));
		waitProgressDialog.start();
		
		RoomService roomService = ServiceManager.getServiceManager().getRoomService();
		roomService.setOnRoomCallback(this);
		roomService.cancelCheckRoom(roomId);
		
	}
	
	public class MyCheckListAdapter extends BaseAdapter{
		Context  context ; 
		int resId ;
		LayoutInflater inflate;
		ArrayList<CheckRoom> roomList;
		int badge1;
		int badge2;
		ImageLoader imageLoader;
		
		public MyCheckListAdapter(Activity act, int layoutRes, ArrayList<CheckRoom> roomList, ImageLoader imageLoader){
			this.context = act;
			this.resId = layoutRes;
			this.roomList = roomList;
			inflate = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			this.badge1 = R.drawable.main_checknumber_bg;
			this.badge2 = R.drawable.main_checknumber_complete_bg;
			this.imageLoader =imageLoader;
		}
		public int getCount() {
			// TODO Auto-generated method stub
			return this.roomList.size();
		}

		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return this.roomList.get(position);
		}

		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			final int pos = position;
			MyCheckRoomViewHolder viewHolder;
			
			if (convertView == null){
				convertView = inflate.inflate(resId,parent, false);
				viewHolder = new MyCheckRoomViewHolder();			
				viewHolder.image = (ImageView)convertView.findViewById(R.id.list_image);
				viewHolder.joinInfo =  (TextView)convertView.findViewById(R.id.mycheck_room_joincount_textview);
				viewHolder.myCheck = (CheckBox)convertView.findViewById(R.id.mycheck_check_btn);
				viewHolder.purpose  = (TextView)convertView.findViewById(R.id.mycheck_room_purpose_textview);
				viewHolder.term = (TextView)convertView.findViewById(R.id.mycheck_room_team_textview);
				viewHolder.title = (TextView)convertView.findViewById(R.id.mycheck_room_title_textview);
				viewHolder.roomDetailBtn =  convertView.findViewById(R.id.mycheck_row_left_contaniner);
				viewHolder.alarmTimeBadge = (TextView)convertView.findViewById(R.id.alramtime_badge);
				viewHolder.checkBadge = (TextView)convertView.findViewById(R.id.mycheck_badge);
				convertView.setTag(viewHolder);
			}else {
				viewHolder = (MyCheckRoomViewHolder)convertView.getTag();
			}

			
			final TextView cBadge =viewHolder.checkBadge;
			viewHolder.image.setImageResource(R.drawable.stub);
			
			String url  = null; 
			//이미지가 없을 경우 이미지 경로가 "0"으로 오는 경우가 있어 아래와 같이 코드를 적용한다.
			if (!CommonUtils.isNullOrEmpty(roomList.get(position).roomImagePath) && !"0".equals(roomList.get(position).roomImagePath)){
				url = Service.BASE_URL + roomList.get(position).roomImagePath;
			}
			imageLoader.displayImage(url, viewHolder.image);
			
			viewHolder.alarmTimeBadge.setVisibility(View.VISIBLE);
			if (roomList.get(position).alarmLevel == RoomInfo.ROOM_ALARM_OK){
				viewHolder.alarmTimeBadge.setText(roomList.get(position).alarmTime);
			}else {
				viewHolder.alarmTimeBadge.setVisibility(View.INVISIBLE);
			}
			
			viewHolder.title.setText(roomList.get(position).roomTitle);
			viewHolder.purpose.setText(roomList.get(position).roomPurpose);
			viewHolder.term.setText(roomList.get(position).startDate + " ~ " + roomList.get(position).endDate );
			viewHolder.joinInfo.setText(roomList.get(position).curMemberCount + "/" +roomList.get(position).maxMemberCount );
			
			boolean  isRoomCompleted = roomList.get(pos).checkedMemberCount >=roomList.get(pos).curMemberCount;
			cBadge.setBackgroundResource(isRoomCompleted? badge2:badge1);
			cBadge.setPadding(1, 1, 1,1);
			cBadge.setText(CommonUtils.int2string(roomList.get(pos).checkedMemberCount));

	    	viewHolder.roomDetailBtn.setOnClickListener(new OnClickListener() {
				public void onClick(View view) {
					Intent i = new Intent(getActivity(), RoomDetailActivity.class);
					i.putExtra("roomId", roomList.get(pos).roomId);
					i.putExtra("roomTitle", roomList.get(pos).roomTitle);
					i.putExtra("roomOwner", roomList.get(pos).roomOwner);
					startActivity(i);
				}
			});
			
	    	viewHolder.myCheck.setOnClickListener(new OnClickListener() {
				public void onClick(View view) {
					CheckBox check = (CheckBox)view;
					Log.v(pos + ":" +roomList.get(pos).roomTitle+  " 체크상태", check.isChecked() + "");
					
					refreshPos = pos;
					refeshBadge = cBadge;
					if (check.isChecked()){
						checkRoom(roomList.get(pos).roomId);
					}else {
						cancelCheck(roomList.get(pos).roomId);
					}
				}
			});
	    	
	    	viewHolder.myCheck.setChecked(roomList.get(position).checked);
			return convertView;
		}
	}
	
	public class MyCheckRoomViewHolder {
		public ImageView image; 
		public TextView joinInfo; 
		public CheckBox myCheck;
		public TextView purpose; 
		public TextView term; 
		public TextView title; 
		public View roomDetailBtn; 
		public TextView alarmTimeBadge; 
		public TextView checkBadge;
	}
	
	
  
}