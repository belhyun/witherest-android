package com.teamteam.witherest.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Bitmap.Config;
import android.graphics.PorterDuff.Mode;

public class ImageUtils {
	
	private Paint paint;
	private Rect rect; 	
	public ImageUtils(){
		paint = new Paint();
		paint.setAntiAlias(true);
	}
	//사각형의 비트맵 이미지를 라운드 이미지 Bitmap 으로 변환한다.
	public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
		Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
				bitmap.getHeight(), Config.ARGB_8888);
		Canvas canvas = new Canvas(output);

		final int color = 0xff424242;
		final Paint paint = new Paint();
		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
		final RectF rectF = new RectF(rect);
		final float roundPx = pixels;

		
		canvas.drawARGB(0, 0, 0, 0);
		paint.setColor(color);
		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
		canvas.drawBitmap(bitmap, rect, rect, paint);

		return output;
	}

	// 이미지 파일을 지정한 폭과 높이에 근접하게 Bitmap 으로 가져온다.
	public Bitmap getSimilarBitmap(File f, int width, int height) {
		try {
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			FileInputStream stream1 = new FileInputStream(f);
			BitmapFactory.decodeStream(stream1, null, o);
			stream1.close();

			float widthScale = o.outWidth / width;
			float heightScale = o.outHeight / height;
			float scale = widthScale > heightScale ? widthScale : heightScale;
			if (scale > 8) {
				o.inSampleSize = 8;
			} else if (scale > 6) {
				o.inSampleSize = 6;
			} else if (scale > 4) {
				o.inSampleSize = 4;
			} else if (scale > 2) {
				o.inSampleSize = 2;
			} else {
				o.inSampleSize = 1;
			}

			o.inJustDecodeBounds = false;
			FileInputStream stream2 = new FileInputStream(f);
			Bitmap bitmap = BitmapFactory.decodeStream(stream2, null, o);
			stream2.close();
			return bitmap;
		} catch (FileNotFoundException e) {
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}
}
