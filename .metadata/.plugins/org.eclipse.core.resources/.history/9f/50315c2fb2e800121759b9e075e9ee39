package com.teamteam.witherest;

import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.teamteam.customComponent.SimpleProgressDialog;
import com.teamteam.witherest.alarm.WitherestAlarms;
import com.teamteam.witherest.alarm.WitherestAlarms.Alarm;
import com.teamteam.witherest.alarm.WitherestAlarms.AlarmRegisterAction;
import com.teamteam.witherest.model.Session;
import com.teamteam.witherest.service.callback.RoomServiceCallback;
import com.teamteam.witherest.service.callback.UserServiceCallback;
import com.teamteam.witherest.service.callback.object.BaseResponseObject;
import com.teamteam.witherest.service.callback.object.LoginResponseObject;
import com.teamteam.witherest.service.callback.object.MyCheckResponseObject;
import com.teamteam.witherest.service.callback.object.MyCheckResponseObject.CheckRoom;
import com.teamteam.witherest.service.internal.ErrorHandler;
import com.teamteam.witherest.service.internal.RoomService;
import com.teamteam.witherest.service.internal.Service;
import com.teamteam.witherest.service.internal.ServiceManager;
import com.teamteam.witherest.service.internal.UserService;

public class LoginActivity extends Activity implements OnClickListener,UserServiceCallback,RoomServiceCallback{
	
	private SimpleProgressDialog waitProgressDialog;
	
	private EditText mIdEditText;
	private EditText mPasswdEditText;
	private Button mLoginBtn;
	private TextView memberJoinBtn;
	
	private String id;
	private String passwd;
	private String gcmId;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    requestWindowFeature(Window.FEATURE_NO_TITLE);
	    setContentView(R.layout.activity_login);
	    
	    mIdEditText = (EditText) findViewById(R.id.activity_login_id_edittext);
	    mPasswdEditText = (EditText) findViewById(R.id.activity_login_passwd_edittext);
	    
	    //GCM 아이디는 앱 실행시 초기에 받아오기 때문에, 스플래쉬 액티비티 이후에는 언제나 사용할 수 있다.
	    
	    gcmId = ((Witherest)getApplication()).getGCMId();
	    //회원 가입화면에서 넘어온 경우, 가입한 아이디를 아이디 입력창에 세팅해주고, 포커스를 이동한다.
	    Intent i = getIntent();
	    String userId = i.getStringExtra("userId");
	    if (userId != null && userId.trim().length() >0){
	    	mIdEditText.setText(userId);
	    	mPasswdEditText.requestFocus();
	    }else {
	    	mIdEditText.requestFocus();
	    }
	    
	    mLoginBtn = (Button) findViewById(R.id.activity_login_login_btn);
	    mLoginBtn.setOnClickListener(this);
	    memberJoinBtn = (TextView)findViewById(R.id.activity_login_memeber_join_btn);
	    memberJoinBtn.setOnClickListener(this);
	    
	}
    
	public void onClick(View v) {
		switch(v.getId()) {
		case R.id.activity_login_login_btn: 
			
			id = mIdEditText.getText().toString();
			passwd = mPasswdEditText.getText().toString();
			
			/* id form value check */
			if(id == null || id.length() == 0) {
				Toast.makeText(LoginActivity.this, getString(R.string.login_insert_id_empty), Toast.LENGTH_SHORT).show();
				break;
			}
			
			/* passwd form value check */
			if(passwd == null || passwd.length() == 0) {
				Toast.makeText(LoginActivity.this, getString(R.string.login_insert_passwd_empty), Toast.LENGTH_SHORT).show();
				break;
			} 
				
			login();
			break;
			
		case R.id.activity_login_memeber_join_btn:
			Intent i = new Intent(LoginActivity.this, SignupActivity.class);
			i.putExtra("returnActivity","com.teamteam.witherest.MainActivity");
			LoginActivity.this.startActivity(i);
			finish();
			break;
		}
	}

	
	@Override
	protected void onPause() {
		super.onPause();
		SimpleProgressDialog.end(waitProgressDialog);

	}

	@Override
	protected void onResume() {
		super.onResume();
		/*	 Progress Dialog Start */
		waitProgressDialog = new SimpleProgressDialog(LoginActivity.this, getString(R.string.login_dialog_title),getString(R.string.login_dialog_message));
		waitProgressDialog.start();
	}

	public void login(){
		if (!waitProgressDialog.isShowing()){
			waitProgressDialog.show();
		}
		ServiceManager serviceManager = ServiceManager.getServiceManager();
		UserService userService = serviceManager.getUserService();
		userService.setOnUserCallback(this);
		userService.login(id, passwd, gcmId);
	}
	
	private void getMyCheckRooms(String userIndex) {
		RoomService roomService = ServiceManager.getServiceManager().getRoomService();
		roomService.setOnRoomCallback(this);
		roomService.getMyCheckRooms(userIndex);
	}
	
	private void registerAlarm(ArrayList<CheckRoom> roomList) {
		ArrayList<Alarm> alarmList = new ArrayList<Alarm>();
		for (CheckRoom myCheckRoom : roomList){
			Alarm alarm = new Alarm();
			alarm.userId = Session.getInstance().user.id;
			alarm.roomId = myCheckRoom.roomId;
			alarm.roomName = myCheckRoom.roomTitle;
			alarm.roomPurpse = myCheckRoom.roomPurpose;
			alarm.alarmTime = myCheckRoom.alarmTime;
			alarm.alarmEnabled = myCheckRoom.alarmLevel;
			alarm.userRoomTimeOption = Session.getInstance().user.isRoomTimeNotice ? 1:0;
			alarmList.add(alarm);
		}
		
		Log.v("witherest info", "마이 체크룸 갯수 --->" + roomList.size());
		WitherestAlarms alarms = new WitherestAlarms(this);
		alarms.registerAlarms(alarmList, AlarmRegisterAction.INSERT_AFTER_ALARM_START);
		alarms.close();
	}
	
	
	public void onUserServiceCallback(BaseResponseObject object) {
		
		if (object.resultCode == Service.RESULT_FAIL) {
			if (waitProgressDialog.isShowing()){
				waitProgressDialog.dismiss();
			}
			
			mIdEditText.requestFocus();
			return;
		}
		
		switch(object.requestType){
		case Service.REQUEST_TYPE_LOGIN:
			
			if (object.resultCode == ErrorHandler.COMMON_ERROR || object.resultCode == ErrorHandler.NETWORK_DISABLE ||
					object.resultCode == ErrorHandler.PARSING_ERROR){
				AlertDialog.Builder builder = new AlertDialog.Builder(this);
				builder.setTitle(R.string.fatal_network_error);
				builder.setMessage(R.string.fatal_network_error_message);
				builder.setCancelable(false);
				builder.setPositiveButton(R.string.confirm,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
							
							}
						});
				builder.create().show();
				return;
			}else if (object.resultCode == ErrorHandler.CONNECTION_TIMEOUT || object.resultCode == ErrorHandler.READ_TIMEOUT){
				AlertDialog.Builder builder2 = new AlertDialog.Builder(this);
				builder2.setTitle(R.string.tempo_network_error);
				builder2.setMessage(R.string.tempo_network_error_message);
				builder2.setCancelable(false);
				builder2.setPositiveButton(R.string.confirm,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
								new Handler().postDelayed(new Runnable() {
									public void run() {
										login();
									}
								}, 100);
							}
						});

				builder2.setNegativeButton(R.string.no,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
							}
						});

				builder2.create().show();
				return;
			}
			
			LoginResponseObject obj = (LoginResponseObject)object;
			
			obj.user.id = id;
			obj.user.password = passwd;
			Session.getInstance().user = obj.user;
			Session.getInstance().user.gcmId = gcmId;
			Session.getInstance().sessionStatus = Session.AUTHORIZED;
			Session.getInstance().sessionKey = obj.token;	
			
			WitherestPreference pref = new WitherestPreference(this);
			pref.putString(WitherestPreference.KEY_EMAIL, obj.user.id);
			pref.putString(WitherestPreference.KEY_PASSWORD, obj.user.password);
			pref.commit();
			
			boolean isFirstRunning = pref.getBoolean(
					Session.getInstance().user.id+ WitherestPreference.LEY_FIRST_RUNNING_SUFFIX, true);
			
			WitherestAlarms alarms = new WitherestAlarms(this);
			
			if (isFirstRunning){
				Log.v("witherest info", "witherest 앱은 현재 처음 실행됩니다");
				pref.putBoolean(Session.getInstance().user.id+"_isFirstRunning", false);
				pref.commit();
				if (alarms.isEmpty()){
					getMyCheckRooms(String.valueOf(Session.getInstance().user.userIndex));
				}
			}else {
				if (waitProgressDialog.isShowing()){
					waitProgressDialog.dismiss();
				}
				
				finish();
				Intent i = new Intent(this, MainActivity.class);
				i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
				startActivity(i);
			}
			break;
			
		case Service.REQUEST_TYPE_DUPL_CHECK:
			break;
			
		case Service.REQUEST_TYPE_JOIN:
			break;
			
		case Service.REQUEST_TYPE_LOGOUT:
			break;
		}
	}

	public void onRoomServiceCallback(BaseResponseObject object) {
		if (waitProgressDialog.isShowing()){
			waitProgressDialog.dismiss();
		}
		
		if (object.resultCode == Service.RESULT_FAIL) {
			return;
		}
		
		switch(object.requestType){
		case Service.REQUEST_TYPE_GET_MY_CHECKROOMS:
			MyCheckResponseObject myCheckResponse = (MyCheckResponseObject)object;
			ArrayList<CheckRoom> roomList = myCheckResponse.roomList;
			if (!roomList.isEmpty()) {
				Log.v("witherest info", "방시간 알람을 등록합니다");
				registerAlarm(roomList);
			}
			
			finish();
			Intent i = new Intent(this, MainActivity.class);
			i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(i);
			break;
		}
	}

	private void showMessageToast(String resultMsg) {
		Toast.makeText(this,resultMsg, Toast.LENGTH_LONG).show();
	}

	

}