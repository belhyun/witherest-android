package com.teamteam.witherest.service;


import java.util.HashMap;
import java.util.Map;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpRequestBase;
import android.os.Message;
import android.util.Log;
import com.teamteam.witherest.common.CommonUtils;
import com.teamteam.witherest.model.Category;
import com.teamteam.witherest.model.Session;
import com.teamteam.witherest.service.callback.UserServiceCallback;
import com.teamteam.witherest.service.callback.object.BaseResponseObject;


public class UserService extends Service{

	private static final String USER_ID = "user_id";
	private static final String USER_PWD ="user_pwd";
	private static final String USER_NAME = "user_name";
	private static final String USER_GCM_ID ="gcm_id";
	private static final String USER_INTEREST_CATEGORY = "int_cat";
	private static final String USER_ALARM  = "alarm";
	private static final String USER_PURPOSE="stu_msg";
	private static final String USER_EMIAL ="email";
	private static final String USER_NAME_MODIFY="name";
	private static final String USER_IMAGE ="image";
	
	
	
	private ServiceHandler  handler;
	private UserServiceCallback callback;
	
	public UserService(HttpClient httpClient, ServiceHandler  handler) {
		super(httpClient, handler);
	}

	@Override
	public void finishedBackgroundProcess(String responseText) {
		Log.v("response_roomservice_text", responseText);
		if (callback ==null) return;
		BaseResponseObject obj = ParsingService.parseJson(responseText);
		Message message = Message.obtain();
		message.obj = obj ;
		handler.sendMessage(message);
	}
	
	public void addHeaderSessionKey(HttpRequestBase request) {
	
		String sessionKey = Session.getInstance().sessionKey;
		if (sessionKey != null){
			request.addHeader(Service.ACC_TOKEN, sessionKey);
		}
	}
	

	public void setOnUserCallback(UserServiceCallback callback){
		this.callback = callback;
		handler.setUserServiceCallback(callback);
	}
	
	
	public void login(String id, String pw, String gcmId){
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,id);
		paramMap.put(USER_PWD, pw);
		paramMap.put(USER_GCM_ID, gcmId);
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_LOGIN));
		try {
			sendPost(LOGIN_URL, paramMap);
		} catch (InterruptedException e) {
		 }
	}
	

	public void checkIdDuplicated(String id){
		 Map<String, String> paramMap = new HashMap<String, String>();
			try {
				paramMap.put(USER_ID,id);
				paramMap.put(REQUEST_TYPE_STRING, String.valueOf(REQUEST_TYPE_DUPL_CHECK));
				sendPost(DUPL_CHECK_URL , paramMap);
			} catch (InterruptedException e) {
			}
	}
	
	public void join(String id, String nickName, String pw, Category myCategory){
		 Map<String, String> paramMap = new HashMap<String, String>();
		try {
		paramMap.put(USER_ID,id);
		paramMap.put(USER_PWD, pw);  // 현재 로그인 시와 회원 가입시 패스워드 파라미터가 틀림, 수정이 요구됨
		paramMap.put(USER_NAME, nickName);
		paramMap.put(USER_INTEREST_CATEGORY, String.valueOf(myCategory.categoryId));
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_JOIN));
		sendPost(JOIN_URL, paramMap);
		} catch (InterruptedException e) {
		}
	}
	
	public void logout(int id, String gcmId){
		
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,String.valueOf(id));
		paramMap.put(USER_GCM_ID, gcmId);
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_LOGOUT));
		try {
			sendPost(LOGOUT_URL, paramMap);
		} catch (InterruptedException e) {}	
	}
	
	public void withDraw(){
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,String.valueOf(Session.getInstance().user.userIndex));
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_WITHDRAW));
		try {
			sendPost(WITHDRAW_URL, paramMap);
		} catch (InterruptedException e) {
		 }
	}

	public void updateAlarm(String alarm){
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,String.valueOf(Session.getInstance().user.userIndex));
		paramMap.put(USER_ALARM, alarm);
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_ALARM_UPDATE));
		try {
			sendPost(ALARM_UPDATE_URL, paramMap);
		} catch (InterruptedException e) {
		 }
	}

	public void modifyProfile(String categories, String purpose, String email, String name, String imagePath){
		Log.v("modifyProfile 아이디 파라미터", email+"");
		Log.v("modifyProfile 닉네임 파라미터", name);
		Log.v("modifyProfile 카테고리 파라미터", categories);
		Log.v("modifyProfile 목적 파라미터", purpose);
		Log.v("modifyProfile 이미지 파라미터", imagePath+"이다");
		
		if (CommonUtils.isNullOrEmpty(imagePath) /*|| imagePath.startsWith("/assets")*/){
			modifyProfileWithoutImage( categories, purpose,email, name);
		}else {
			modifyProfileWithImage( categories, purpose,email, name, imagePath);
		}
	}

	private void modifyProfileWithoutImage(String categories, String purpose , String email,
			String name) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,String.valueOf(Session.getInstance().user.userIndex));
		paramMap.put(USER_INTEREST_CATEGORY, categories);
		paramMap.put(USER_EMIAL, email);
		paramMap.put(USER_NAME_MODIFY, name);
		paramMap.put(USER_PURPOSE, purpose);
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_MODIFY_PROFILE));
		
		try {
			sendPost(MODYFY_PROFILE_URL, paramMap);
		} catch (InterruptedException e) {
			Log.v("modifuProfile요청 에러",e.getMessage());
		 }
		
	}

	private void modifyProfileWithImage(String categories, String purpose,String email,
			String name,String imagePath) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put(USER_ID,String.valueOf(Session.getInstance().user.userIndex));
		paramMap.put(USER_INTEREST_CATEGORY, categories);
		paramMap.put(USER_EMIAL, email);
		paramMap.put(USER_NAME_MODIFY, name);
		paramMap.put(USER_PURPOSE, purpose);
		paramMap.put(REQUEST_TYPE_STRING,String.valueOf(REQUEST_TYPE_MODIFY_PROFILE));
		
		sendMultipart(MODIFY_ROOM_URL,imagePath,paramMap);
	}




}
