package com.teamteam.witherest.cacheload;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;

import com.teamteam.witherest.R;
import com.teamteam.witherest.common.AndroUtils;
import com.teamteam.witherest.common.CommonUtils;

public class ImageLoader {

	MemoryCache memoryCache = new MemoryCache();
	FileCache fileCache;
	private Map<ImageView, String> imageViews = Collections
			.synchronizedMap(new WeakHashMap<ImageView, String>());
	ExecutorService executorService;
	Handler handler = new Handler();
	public Animation alphaAnim;
	
	
	public static final int DEFAULT_ROOM_IMAGE = 1;
	public static final int DEFAULT_PROFILE_IMAGE = 2;

	public ImageLoader(Context context) {
		fileCache = new FileCache(context);
		executorService = Executors.newFixedThreadPool(3);
		alphaAnim = AnimationUtils.loadAnimation(context, R.anim.alpha_anim);
	}
	
	final int stub_id = R.drawable.stub;
	
	public void displayImage(String url, ImageView imageView, int imageType) {
		if (CommonUtils.isNullOrEmpty(url) || "0".equals(url)) {
			if (imageType == DEFAULT_ROOM_IMAGE){
				imageView.setImageResource(R.drawable.default_roomimage_bg);
				return;
			}else if (imageType == DEFAULT_PROFILE_IMAGE){
				imageView.setImageResource(R.drawable.default_proimage_bg);
				return;	
			}
		}
		
		imageViews.put(imageView, url);
		if (imageType == DEFAULT_ROOM_IMAGE){
			imageView.setImageResource(R.drawable.default_roomimage_bg);
		}else if (imageType == DEFAULT_PROFILE_IMAGE){
			imageView.setImageResource(R.drawable.default_proimage_bg);
		}
		
		Log.v("이미지 URL", "===> " +  url);
		Bitmap bitmap = memoryCache.get(url);
		if (bitmap != null){
			/*캐시되어 있는 이미지는 라운드 이미지이므로 바로 이미지뷰에 설정한다*/
			imageView.setImageBitmap(bitmap);
		}else {
			queuePhoto(url, imageView, imageType);
			//imageView.setImageResource(stub_id);
		}
	}


	private void queuePhoto(String url, ImageView imageView, int imageType) {
		PhotoToLoad p = new PhotoToLoad(url, imageView, imageType);
		executorService.submit(new PhotosLoader(p));
	}

	private Bitmap getBitmap(String url) {
		File f = fileCache.getFile(url);

		Bitmap b = decodeFile(f);
		if (b != null)
			return b;

		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl
					.openConnection();
			conn.setConnectTimeout(30000);
			conn.setReadTimeout(30000);
			conn.setInstanceFollowRedirects(true);
			conn.setUseCaches(false); 
		    
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			CommonUtils.CopyStream(is, os);
			os.close();
			conn.disconnect();
			
			/*bitmap = AndroUtils.getSimilarBitmap(f, 70, 70);*/
			bitmap = decodeFile(f);
			
			//비트맵 이미지를 라운드 이미지로 변환한다.
			Bitmap corneredBitmap = AndroUtils.getRoundedCornerBitmap(bitmap,10);
			bitmap.recycle();
			return corneredBitmap;
			
		}catch(Exception e){
			Log.v("비트맵 가져오기 Exception", e.getMessage()+"~~");
			return null;
		} catch (Throwable ex) {
			//Log.v("비트맵 가져오기 throwable", ex.getMessage()+"~~");
			ex.printStackTrace();
			if (ex instanceof OutOfMemoryError)
				//Log.v("OutOfMemoryError", "OutOfMemoryError 발생");
				memoryCache.clear();
			return null;
		}
	}

	private Bitmap decodeFile(File f) {
		try {
			
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			FileInputStream stream1 = new FileInputStream(f);
			BitmapFactory.decodeStream(stream1, null, o);
			stream1.close();


			final int REQUIRED_SIZE = 70;
			int width_tmp = o.outWidth, height_tmp = o.outHeight;
			Log.v("원본 이미지 정보", "width ==>"+ width_tmp +" , height ==>" + height_tmp);
			int scale = 1;
			while (true) {
				if (width_tmp / 2 < REQUIRED_SIZE
						|| height_tmp / 2 < REQUIRED_SIZE)
					break;
				width_tmp /= 2;
				height_tmp /= 2;
				scale *= 2;
			}

			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = scale;
			FileInputStream stream2 = new FileInputStream(f);
			Bitmap bitmap = BitmapFactory.decodeStream(stream2, null, o2);
			stream2.close();
		
			return bitmap;
		} catch (FileNotFoundException e) {
			Log.v("비트맵 다운로드 익셉션", e.getMessage() +"===>FileNotFoundException");
		} catch (IOException e) {
			Log.v("비트맵 다운로드 익셉션", e.getMessage() + "===>IOException");
			e.printStackTrace();
		}
		return null;
	}

	private class PhotoToLoad {
		public String url;
		public ImageView imageView;
		public int imageType;
		public PhotoToLoad(String u, ImageView i, int imageType) {
			url = u;
			imageView = i;
			this.imageType = imageType;
		}
	}

	class PhotosLoader implements Runnable {
		PhotoToLoad photoToLoad;

		PhotosLoader(PhotoToLoad photoToLoad) {
			this.photoToLoad = photoToLoad;
		}


		public void run() {
			try {
				if (imageViewReused(photoToLoad))
					return;
				Bitmap bmp = getBitmap(photoToLoad.url);
				if (bmp == null ) {
					BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
					handler.post(bd);
					return;
				}
				
				memoryCache.put(photoToLoad.url, bmp);
				if (imageViewReused(photoToLoad)){
					return;
				}
				
				BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
				handler.post(bd);
				
			} catch (Throwable th) {
				th.printStackTrace();
			}
		}
	}

	boolean imageViewReused(PhotoToLoad photoToLoad) {
		String tag = imageViews.get(photoToLoad.imageView);
		if (tag == null || !tag.equals(photoToLoad.url))
			return true;
		return false;
	}

	class BitmapDisplayer implements Runnable {
		Bitmap bitmap;
		PhotoToLoad photoToLoad;

		public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
			bitmap = b;
			photoToLoad = p;
		}

		public void run() {
			Looper mainLooper = Looper.getMainLooper();
			if (!mainLooper.getThread().isAlive()){
				return;
			}
			if (imageViewReused(photoToLoad))
				return;
			if (bitmap != null){
				Log.v("스케일링 이미지 정보", "width ==>"+ bitmap.getWidth() +" , height ==>" + bitmap.getHeight());
			    // 메인스레드에서 라운드로 이미지로 변형한다음 뷰에 세팅한다.
				/*photoToLoad.imageView.setImageBitmap(AndroUtils.getRoundedCornerBitmap(bitmap,10));*/
			
				//스레드에서 라운드 이미지로 변형한 이미지를 적용 
				photoToLoad.imageView.setImageBitmap(bitmap);
				
			}else {
				if (photoToLoad.imageType == ImageLoader.DEFAULT_PROFILE_IMAGE){
					photoToLoad.imageView.setImageResource(R.drawable.default_proimage_bg);
				}else if (photoToLoad.imageType == ImageLoader.DEFAULT_ROOM_IMAGE){
					photoToLoad.imageView.setImageResource(R.drawable.default_roomimage_bg);
				}
				Log.v("이미지", "최종 이미지 다운로드 결과가 널입니다");
				return;
				
			}
		/*	else
				photoToLoad.imageView.setImageResource(stub_id);*/
		}
	}

	public void removeMemoryCache(String key){
		memoryCache.removeCache(key);
	}
	
	
	public void removeFileCache(String key){
		fileCache.removeCache(key);
	}
	
	public void removeFileAndMemoryCache(String key){
		removeMemoryCache(key);
		removeFileCache(key);
	}
	public void clearCache() {
		memoryCache.clear();
		fileCache.clear();
	}
}
