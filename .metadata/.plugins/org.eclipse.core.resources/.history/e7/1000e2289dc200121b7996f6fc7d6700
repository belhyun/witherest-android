package com.teamteam.witherest;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.Toast;

import com.teamteam.customComponent.popup.ActionItem;
import com.teamteam.customComponent.popup.QuickAction;
import com.teamteam.witherest.model.Session;
import com.teamteam.witherest.service.Service;
import com.teamteam.witherest.service.ServiceManager;
import com.teamteam.witherest.service.UserService;
import com.teamteam.witherest.service.callback.UserServiceCallback;
import com.teamteam.witherest.vo.BaseResponseObject;

public class Fragment_Top_Menu extends Fragment implements UserServiceCallback{

	private Activity activity;
	
	private static final int ID_ADD     = 1;
	private static final int ID_SEARCH   = 2;
	private static final int ID_SETTINGS = 3;
	private static final int ID_LOGIN = 4;
	private static final int ID_LOGOUT = 5;

	private ImageButton open_Btn;

	
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		this.activity = activity;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		View topMenuView = inflater.inflate(R.layout.fragment_top_bar,null);

		ActionItem addItem 	= new ActionItem(ID_ADD, "할일 추가 ", getResources().getDrawable(R.drawable.popup_roommake_icon));
		ActionItem serachItem 	= new ActionItem(ID_SEARCH , "할일 검색", getResources().getDrawable(R.drawable.popup_search_icon));
        ActionItem settingsItem 	= new ActionItem(ID_SETTINGS, "설정", getResources().getDrawable(R.drawable.popup_setting_icon));
      

        //use setSticky(true) to disable QuickAction dialog being dismissed after an item is clicked
       // prevItem.setSticky(true);
       // nextItem.setSticky(true);
		
		final QuickAction quickAction = new QuickAction(activity, QuickAction.VERTICAL);
        quickAction.addActionItem(addItem);
		quickAction.addActionItem(serachItem);
        quickAction.addActionItem(settingsItem);
        
        if ( Session.getInstance().sessionStatus != Session.AUTHORIZED){
            ActionItem loginItems 	= new ActionItem(ID_LOGIN, "로그인", getResources().getDrawable(R.drawable.popup_setting_icon));
            quickAction.addActionItem(loginItems);
            }else {
            	ActionItem logoutItems 	= new ActionItem(ID_LOGOUT, "로그아웃", getResources().getDrawable(R.drawable.popup_setting_icon));
            	quickAction.addActionItem(logoutItems);
            }
       
       
		open_Btn = (ImageButton) topMenuView.findViewById(R.id.btn_open);
		quickAction.setOnActionItemClickListener(new QuickAction.OnActionItemClickListener() {			
			public void onItemClick(QuickAction source, int pos, int actionId) {				
				ActionItem actionItem = quickAction.getActionItem(pos);

				if (actionId == ID_ADD) {
					Intent i = new Intent(activity, MakeRoomActivity.class);
					startActivity(i);
				} else if (actionId == ID_SEARCH) {
					Toast.makeText(activity.getApplicationContext(), "검색 버튼 클릭\n임시로 가입화면으로 이동합니다", Toast.LENGTH_SHORT).show();
					Intent i = new Intent(activity, SignupActivity.class);
					startActivity(i);
				} else if(actionId == ID_SETTINGS){
					Intent i = new Intent(activity, SettingsActivity.class);
					startActivity(i);
				}else if(actionId == ID_LOGIN){
					Intent i = new Intent(activity, LoginActivity.class);
					startActivity(i);
				}else if(actionId == ID_LOGOUT){
					logout();
				}	
			}
		});
		
		open_Btn.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				quickAction.show(v);	
			}
		});	
		return topMenuView;
	}

	private void logout() {
		ServiceManager manager = ServiceManager.getServiceManager();
		UserService userService = manager.getUserService();
		userService.setOnUserCallback(this);
		userService.logout();
	}
	
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
	}

	public void onUserServiceCallback(BaseResponseObject object) {
		if (object.resultCode == Service.RESULT_OK){
			Toast.makeText(getActivity(),object.requestType + ":" + object.resultMsg, Toast.LENGTH_SHORT).show();
			
			Session.getInstance().sessionStatus = Session.NOT_AUTHORIZED;
			Session.getInstance().sessionKey = null;
			
			Intent i = new Intent(getActivity(), MainActivity.class);
	
			i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			startActivity(i);
		}else {
			Toast.makeText(getActivity(),object.resultMsg, Toast.LENGTH_SHORT).show();
		}
	}
}
