package com.teamteam.witherest;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;

import android.view.Window;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.teamteam.customComponent.SimpleProgressDialog;
import com.teamteam.customComponent.popup.ActionItem;
import com.teamteam.customComponent.popup.QuickAction;

import com.teamteam.witherest.RoomBoardFragment.RoomBoardViewHolder;
import com.teamteam.witherest.common.AndroUtils;
import com.teamteam.witherest.common.CommonUtils;
import com.teamteam.witherest.lazyload.ImageLoader;
import com.teamteam.witherest.model.Session;

import com.teamteam.witherest.service.ArticleService;
import com.teamteam.witherest.service.Service;
import com.teamteam.witherest.service.ServiceManager;
import com.teamteam.witherest.service.callback.ArticleServiceCallback;
import com.teamteam.witherest.service.callback.object.ArticleActionResponseObject;
import com.teamteam.witherest.service.callback.object.BaseResponseObject;
import com.teamteam.witherest.service.callback.object.ReplyListResponseObject;
import com.teamteam.witherest.service.callback.object.RoomBoardResponseObject.Message;

public class BoardContentActivity extends Activity implements ArticleServiceCallback{
	
	public int messageId;
	public int writerId;
	public String writerImagePath;
	public String writerNickname;
	public String message;
	public String writeTime;
	public int replyCount;
	
	public int roomId;
	
	public ImageView writerImageView;
	public TextView writerNameView;
	public TextView messageView;
	public TextView replyCountView;
	public TextView writeTimeView;
	
	public Button submitBtn;
	public EditText writeEdit;
	
	public SimpleProgressDialog waitProgressDialog;
	public ImageLoader imageLoader; 
	public ReplyBoardAdapter replyBoardAdapter;
	public ListView replyListView;
	
	public int returningActionCount= 0; 
	public ArticleService articleService;
	public ReplyListResponseObject replyListResponseObject;
	
	public ActionItem modifyItem;;
	public ActionItem deleteItem;
	
	public static final int ACTION_ID_MODIFY =1;
	public static final int ACTION_ID_DELETE =2;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	    requestWindowFeature(Window.FEATURE_NO_TITLE);
	    setContentView(R.layout.activity_board_content);
	
	    initInstance();
		initView();
		initListener();
	}
	
	private void initInstance() {
		Intent i = getIntent();
		if (i == null){
			AndroUtils.showToastMessage(this, R.string.wrong_approach, Toast.LENGTH_SHORT);
			return; 
		}
		
		messageId = i.getIntExtra("messageId", -1);
		writerId = i.getIntExtra("writerId", -1);
		writerImagePath = i.getStringExtra("writerImagePath");
		writerNickname = i.getStringExtra("writerNickname");
		message = i.getStringExtra("message");
		writeTime = i.getStringExtra("writeTime");
		replyCount = i.getIntExtra("replyCount",-1);
		roomId = i.getIntExtra("roomId", -1);
		
		imageLoader = new ImageLoader(this);
		imageLoader.clearCache();
		articleService = ServiceManager.getServiceManager().getArticleService();
		setListClickActionItem();
	}
		
	private void initView() {
		replyListView = (ListView)findViewById(R.id.reply_listview);
		writerImageView = (ImageView)findViewById(R.id.roomboard_row_image);
		writerNameView = (TextView)findViewById(R.id.roomboard_textview1);
		messageView = (TextView)findViewById(R.id.roomboard_textview2);
		replyCountView = (TextView)findViewById(R.id.reply_count);
		writeTimeView = (TextView)findViewById(R.id.roomboard_textview3);
		submitBtn = (Button)findViewById(R.id.roomboard_write_btn);
		writeEdit = (EditText)findViewById(R.id.roomboard_write_edittext);
		
		writerImageView.setImageBitmap(null);
		String url = null;
		if (CommonUtils.isNullOrEmpty(writerImagePath) || "0".equals(writerImagePath)){
			url = Service.BASE_URL + writerImagePath;
		}
		imageLoader.displayImage(url, writerImageView);
		
		writerNameView.setText(writerNickname);
		messageView.setText(message);
		writeTimeView.setText(writeTime);
		replyCountView.setText(CommonUtils.int2string(replyCount));
	}

	private void initListener() {
		submitBtn.setOnClickListener(submitBtnListener) ;
	}
	
	//댓글 쓰기 리스너 
	OnClickListener submitBtnListener = new View.OnClickListener() {
		public void onClick(View v) {
			if (CommonUtils.isNullOrEmpty(writeEdit.getText().toString().trim())){
				AndroUtils.showToastMessage(BoardContentActivity.this, getResources().getString(R.string.no_text),
						Toast.LENGTH_SHORT);
				return;
			}
			AndroUtils.hideSoftKeyboard(BoardContentActivity.this, writeEdit);
			submitReply(writeEdit.getText().toString().trim());
		}

	};
	
	private void setListClickActionItem() {
		
		modifyItem	= new ActionItem(ACTION_ID_MODIFY, "수정 ", getResources().getDrawable(R.drawable.comment_comment_icon_bg));
		deleteItem 	= new ActionItem(ACTION_ID_DELETE , "삭제", getResources().getDrawable(R.drawable.comment_trash_icon_bg));
    	
	}
        
	
	private void submitReply(String string) {
		waitProgressDialog = new SimpleProgressDialog(BoardContentActivity.this, 
				getString(R.string.wait_title),getString(R.string.wait_message));
		waitProgressDialog.start();
		
		ArticleService articleService = ServiceManager.getServiceManager().getArticleService();
		articleService.setOnArticleCallback(this);	
		articleService.submitReplyComment(writeEdit.getText().toString().trim(), 
				RoomDetailActivity.roomWithFragment.roomWithResponse.checkRoomWith.roomId, messageId);
		
	}

	public void onArticleServiceCallback(BaseResponseObject object) {
		if (waitProgressDialog.isShowing()){
			SimpleProgressDialog.stop(waitProgressDialog);
		}
		
		if (object.resultCode == Service.RESULT_FAIL) {
			AndroUtils.showToastMessage(this, object.requestType + " : " + object.resultMsg, Toast.LENGTH_SHORT);
			return;
		}
		
		switch(object.requestType){
		case Service.REQUEST_TYPE_SUBMIT_REPLY_COMMENT :
			AndroUtils.showToastMessage(this, object.requestType + " : " + object.resultMsg, Toast.LENGTH_SHORT);
			ArticleActionResponseObject obj = (ArticleActionResponseObject)object;
			addReplyToList(obj);
			break;
			
		case Service.REQUEST_TYPE_DELETE_COMMENT:
			ArticleActionResponseObject obj1 = (ArticleActionResponseObject)object;
			deleteReplyFromList(obj1);
			break;
		case Service.REQUEST_TYPE_GET_REPLYS_BY_ID:
			replyListResponseObject  = (ReplyListResponseObject)object;
			updateUi(replyListResponseObject);
			break;
		}			
	}
	 
	
	private void updateUi(ReplyListResponseObject replyListResponseObject2) {
		setAdapter();
	}

	
	private void setAdapter() {
		replyBoardAdapter = new ReplyBoardAdapter(this, imageLoader, R.layout.roomboard_list_item_row,
				replyListResponseObject.messageList);
		replyListView.setAdapter(replyBoardAdapter);
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (replyListResponseObject == null){
			getReplysById(messageId);
		}
	}
	
	

	private void getReplysById(int messageId) {
		waitProgressDialog = new SimpleProgressDialog(BoardContentActivity.this, 
				getString(R.string.wait_title),getString(R.string.wait_message));
		waitProgressDialog.start();
		articleService.setOnArticleCallback(this);
		articleService.getReplysById(roomId, messageId);	
	}
	
	public int findPositionById(int id ){
		ArrayList<Message> messageList = replyListResponseObject.messageList;
		int index = -1;
		
		for (int i = 0; i < messageList.size(); i++){
			Message message = messageList.get(i);
			if (message.messageId == id){
				index = i;
				break;
			}
		}
		return index;
	}
	
	private void refreshList() {
		replyBoardAdapter.notifyDataSetChanged();
	}

	private void addReplyToList(ArticleActionResponseObject obj) {
		returningActionCount++;
		Message message = new Message();
		message.messageId = obj.messageId;
		message.writeId = Session.getInstance().user.userIndex;
		message.writerNickname = Session.getInstance().user.nickName;
		message.writeTime="방금";
		message.isReply = false;
		message.article_type = 0;
		message.replyCount = 0;
		message.parentId = 0;
		message.writerImagePath = Session.getInstance().user.profileImagePath;
		
		replyListResponseObject.messageList.add(message);
		resetEdit();
		refreshList();
		replyListView.setSelection(position)
	}
	
	private void resetEdit() {
		 writeEdit.setText("");
	}

	private void deleteReplyFromList(ArticleActionResponseObject obj1) {
		returningActionCount--;
		int index = findPositionById(obj1.messageId);
		replyListResponseObject.messageList.remove(index);
		refreshList();
	}
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			Intent i = new Intent();
			i.putExtra("parentMessageId", messageId);
			i.putExtra("increase", returningActionCount);
			setResult(RESULT_OK, i);
			finish();
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	private void deleteMyComment(Message message) {
		waitProgressDialog = new SimpleProgressDialog(this, 
				getString(R.string.wait_title),getString(R.string.wait_message));
		waitProgressDialog.start();
		
		ArticleService articleService = ServiceManager.getServiceManager().getArticleService();
		articleService.setOnArticleCallback(this);	
		articleService.deleteComment(message.messageId);
	}
	
	
	public class ReplyBoardAdapter extends BaseAdapter{
		
		Context con;
		int resId;
		ArrayList<Message> messageList;
		LayoutInflater inflater;
		ImageLoader imageLoader;
		
		public ReplyBoardAdapter(Context con, ImageLoader imageLoader, int resId, ArrayList<Message> messageList2){
			this.con = con;
			this.imageLoader = imageLoader;
			this.resId = resId;
			this.messageList = messageList2;
			this.inflater = (LayoutInflater) con.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		}
		public int getCount() {
			return messageList.size();
		}
		
		public Object getItem(int position) {
			return messageList.get(position);
		}
		
		public long getItemId(int position) {
			return position;
		}
		public View getView(int position, View convertView, ViewGroup parent) {
			final int  pos = position;
			ReplyViewHolder viewHolder = null; 
			if (convertView == null){
				convertView = inflater.inflate(resId, parent, false);
				viewHolder = new ReplyViewHolder();
				viewHolder.writerImageView = (ImageView) convertView.findViewById(R.id.roomboard_row_image);
				viewHolder.wirterNameView =   (TextView)convertView.findViewById(R.id.roomboard_textview1);
				viewHolder.messageView =  (TextView)convertView.findViewById(R.id.roomboard_textview2);
				viewHolder.replyCoutView = (TextView)convertView.findViewById(R.id.reply_count);
				viewHolder.writeTimeView = (TextView)convertView.findViewById(R.id.roomboard_textview3);
				convertView.setTag(viewHolder);
			}else {
				viewHolder = (ReplyViewHolder )convertView.getTag();
			}
			viewHolder.writerImageView.setImageBitmap(null);
			
			String url = null;
			if (!CommonUtils.isNullOrEmpty(messageList.get(position).writerImagePath) &&
					!"0".equals(messageList.get(position).writerImagePath)){
				 url = Service.BASE_URL+messageList.get(position).writerImagePath;
			}
			
			imageLoader.displayImage(url, viewHolder.writerImageView); 
			viewHolder.wirterNameView.setText(messageList.get(position).writerNickname);
			viewHolder.messageView.setText(messageList.get(position).message);
			viewHolder.writeTimeView.setText(messageList.get(position).writeTime);
			final View  container = convertView.findViewById(R.id.roomboard_contaniner);
			final QuickAction listQuickAction = new QuickAction(con, QuickAction.VERTICAL);
			final TextView anchorView = viewHolder.messageView;
			
			//listQuickAction.addActionItem(modifyItem);
			listQuickAction.addActionItem(deleteItem);
			container.setOnLongClickListener(new OnLongClickListener() {
				public boolean onLongClick(View v) {
					if (Session.getInstance().sessionStatus != Session.AUTHORIZED){
						return true;
					}
					if (Session.getInstance().user.userIndex !=messageList.get(pos).writeId){
						return true;
					}
				
					listQuickAction.show(anchorView);
					return true;
					}
				});
		    listQuickAction.setOnActionItemClickListener(new QuickAction.OnActionItemClickListener() {			
				public void onItemClick(QuickAction source, int actionPos, int actionId) {				
					ActionItem actionItem = listQuickAction.getActionItem(actionPos);
					if (actionId == ACTION_ID_MODIFY) {
							
					} else if (actionId == ACTION_ID_DELETE) {
						deleteMyComment(messageList.get(pos));
				    }
				}
	        });		
			
			
			return convertView;
		}
	}
	
	public class ReplyViewHolder{
		public ImageView writerImageView;
		public TextView wirterNameView;
		public TextView messageView;
		public TextView replyCoutView;
		public TextView writeTimeView;
	}
}
