package com.teamteam.witherest.service.external;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import android.content.Context;
import android.graphics.Bitmap;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import com.evernote.client.android.EvernoteSession;
import com.evernote.client.android.EvernoteUtil;
import com.evernote.client.android.InvalidAuthenticationException;
import com.evernote.client.android.OnClientCallback;
import com.evernote.client.conn.mobile.FileData;
import com.evernote.edam.type.Note;
import com.evernote.edam.type.Resource;
import com.evernote.edam.type.ResourceAttributes;
import com.evernote.thrift.transport.TTransportException;
import com.teamteam.witherest.R;

public class EvernoteController {

	public static class ImageData {
		public Bitmap imageBitmap;
		public String filePath;
		public String mimeType;
		public String fileName;
	}

	// Instance of selected image
	private ImageData mImageData;

	private static final String TAG = "EvernoteService";
	private static final String CONSUMER_KEY = "fourstory4";
	private static final String CONSUMER_SECRET = "77876f8c031ad342";
	private static final EvernoteSession.EvernoteService EVERNOTE_SERVICE = EvernoteSession.EvernoteService.SANDBOX;

	private EvernoteSession mEvernoteSession;
	private Context ctx;
	private String mSelectedNotebookGuid;

	public EvernoteController(Context ctx) {
		this.ctx = ctx;
		mEvernoteSession = EvernoteSession.getInstance(ctx, CONSUMER_KEY,CONSUMER_SECRET, EVERNOTE_SERVICE);
	}

	public boolean isLoggedin() {
		return mEvernoteSession.isLoggedIn();
	}

	public void login() {
		mEvernoteSession.authenticate(ctx);
	}

	public void logout() {
		try {
			mEvernoteSession.logOut(ctx);
		} catch (InvalidAuthenticationException e) {
			Log.e(TAG, "Tried to call logout with not logged in", e);
		}
	}

	public void createSimpleNote(String title, String roomName,
		String userName, String time, OnClientCallback<Note> listener) {
		if (!isLoggedin()) {
			return;
		}

		if (TextUtils.isEmpty(title) || TextUtils.isEmpty(roomName)) {
			Toast.makeText(ctx.getApplicationContext(),R.string.empty_content_error, Toast.LENGTH_LONG).show();
		}

		Note note = new Note();
		title = makeTitle(title);
		String content = makeEvernoteContent(roomName, userName, time);
	
		note.setTitle(title);
		note.setContent(EvernoteUtil.NOTE_PREFIX + content
				+ EvernoteUtil.NOTE_SUFFIX);

		if (!TextUtils.isEmpty(mSelectedNotebookGuid)) {
			note.setNotebookGuid(mSelectedNotebookGuid);
		}

		try {
			mEvernoteSession.getClientFactory().createNoteStoreClient().createNote(note, listener);
		} catch (TTransportException exception) {
			Log.e(TAG, "Error creating notestore", exception);
			Toast.makeText(ctx.getApplicationContext(),
					R.string.error_creating_notestore, Toast.LENGTH_LONG)
					.show();
		}
	}

	private String makeTitle(String title) {
		String result = "<p><font size=\'15\' color=\'black\'>" + title
				+ "  목표 수행 노트" + "</font></p>";
		return result;
	}

	private String makeEvernoteContent(String roomName, String userName,
			String time) {
		/*String result = "<p><font size=\'12\' color=\'black\'>" 
				+ "Witherest 에서  \"</font>"
				+ "<font color =\'blue\'  size=\'12\'>"
				+ roomName
				+ "</font><font size=\'12\' color=\'black\'>\' 를 수행하셨습니다</font></p>";
		result += "<p><font size =\'10\' color=\'green\'>"
				+ time
				+ "</font><font size =\'10\' color=\'gray\'>witherest app</font></p>";*/
		String result = "<p>"+ userName + " has achieved the goal of " + roomName + " in \'witherest \'</p>"+
		            	   "<p>" + time + "    Witherest App</p>";
		return result;

	}

	public void createSimpleNote(String title, String content, String name) {
		if (!isLoggedin()) {
			return;
		}

		if (TextUtils.isEmpty(title) || TextUtils.isEmpty(content)) {
			Toast.makeText(ctx.getApplicationContext(),
					R.string.empty_content_error, Toast.LENGTH_LONG).show();
		}

		Note note = new Note();
		note.setTitle(title);
		note.setContent(EvernoteUtil.NOTE_PREFIX + content	+ EvernoteUtil.NOTE_SUFFIX);

		if (!TextUtils.isEmpty(mSelectedNotebookGuid)) {
			note.setNotebookGuid(mSelectedNotebookGuid);
		}

		try {
			mEvernoteSession.getClientFactory().createNoteStoreClient()
					.createNote(note, new OnClientCallback<Note>() {
						@Override
						public void onSuccess(Note data) {
							Toast.makeText(ctx.getApplicationContext(),
									R.string.note_saved, Toast.LENGTH_LONG)
									.show();
						}

						@Override
						public void onException(Exception exception) {
							Log.e(TAG, "Error saving note", exception);
							Toast.makeText(ctx.getApplicationContext(),
									R.string.error_saving_note,
									Toast.LENGTH_LONG).show();
						}
					});
		} catch (TTransportException exception) {
			Log.e(TAG, "Error creating notestore", exception);
			Toast.makeText(ctx.getApplicationContext(),
					R.string.error_creating_notestore, Toast.LENGTH_LONG)
					.show();
		}
	}

	public void creaateImageNote() {
		if (mEvernoteSession.isLoggedIn() && mImageData != null
				&& mImageData.filePath != null) {

			String f = mImageData.filePath;
			try {
				InputStream in = new BufferedInputStream(new FileInputStream(f));
				FileData data = new FileData(EvernoteUtil.hash(in), new File(f));
				in.close();

				Resource resource = new Resource();
				resource.setData(data);
				resource.setMime(mImageData.mimeType);
				ResourceAttributes attributes = new ResourceAttributes();
				attributes.setFileName(mImageData.fileName);
				resource.setAttributes(attributes);

				Note note = new Note();
				note.setTitle("Android test note");
				note.addToResources(resource);

				String content = EvernoteUtil.NOTE_PREFIX
						+ "<p>This note was uploaded from Android. It contains an image.</p>"
						+ EvernoteUtil.createEnMediaTag(resource)
						+ EvernoteUtil.NOTE_SUFFIX;

				note.setContent(content);
				mEvernoteSession.getClientFactory().createNoteStoreClient()
						.createNote(note, new OnClientCallback<Note>() {
							@Override
							public void onSuccess(Note data) {
								Toast.makeText(ctx.getApplicationContext(),
										R.string.note_saved, Toast.LENGTH_LONG)
										.show();
							}

							@Override
							public void onException(Exception exception) {
								Log.e(TAG, "Error saving note", exception);
								Toast.makeText(ctx.getApplicationContext(),
										R.string.error_saving_note,
										Toast.LENGTH_LONG).show();

							}
						});
			} catch (Exception ex) {
				Log.e(TAG, "Error creating notestore", ex);
				Toast.makeText(ctx.getApplicationContext(),
						R.string.error_creating_notestore, Toast.LENGTH_LONG)
						.show();

			}
		}
	}
}
