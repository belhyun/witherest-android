package com.teamteam.witherest;

import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.TimePickerDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.text.InputType;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.teamteam.customComponent.SimpleProgressDialog;
import com.teamteam.witherest.MakeRoomActivity.MakeRoomSettingDialogFragment;
import com.teamteam.witherest.common.AndroUtils;
import com.teamteam.witherest.common.CommonUtils;
import com.teamteam.witherest.lazyload.ImageLoader;
import com.teamteam.witherest.model.AppCache;
import com.teamteam.witherest.model.Category;
import com.teamteam.witherest.model.Session;
import com.teamteam.witherest.model.UserProfile;
import com.teamteam.witherest.service.Service;
import com.teamteam.witherest.service.ServiceManager;
import com.teamteam.witherest.service.UserService;
import com.teamteam.witherest.service.callback.UserServiceCallback;
import com.teamteam.witherest.service.callback.object.BaseResponseObject;
import com.teamteam.witherest.service.callback.object.CreateRoomResponseObject;
import com.teamteam.witherest.service.callback.object.RoomInfoResponseObject;

public class ProfileActivity extends  FragmentActivity  implements View.OnClickListener , UserServiceCallback{

	public ArrayList<Category> appCategories;
	
	public TextView mTv_NickName;
	public TextView mTv_Email;
	public TextView mTv_Purpose;
	public TextView mTv_MyCategory;
	public ImageView mTv_ProfileImage;
	
	public static  String imagePath ;
	
	public String c_ProfileImagePath;
	public String c_Name;
	public String c_Email;
	public String c_Purpose;
	public String c_Categories;
	public ArrayList<Category> c_CategoryList;
	
	private SimpleProgressDialog waitProgressDialog;
	public UserService userService;
	public ImageLoader imageLoader; 
	
	//이미미 관련 인텐트 플래그 변수
	public static final int PICK_FROM_ALBUM = 0;
	public static final int PICK_FROM_CAMERA = 1;
	public static final int CROP_FROM_CAMERA = 2;
	
	//다이알로그 생성 변수 
	public static final int DIALOG_PROFILE_IMAGE= 0;    
	public static final int DIALOG_NICNAME= 1;   
	public static final int DIALOG_EMAIL= 2;   
	public static final int DIALOG_PURPOSE= 3;   
	public static final int DIALOG_MYCATEGOTY= 4;   
	
	public String tmpFile ;
	public String tmpImagePath ;
	public static Uri mImageCaptureUri;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_profile);
		
		initInstance();
		initView();
		initListener();
	}

	private void initInstance() {
		appCategories = AppCache.getInstance().getAppCategory();
		userService = ServiceManager.getServiceManager().getUserService();
		imageLoader=new ImageLoader(getApplicationContext());
		
		c_CategoryList = new ArrayList<Category>();
		
		c_Name = Session.getInstance().user.nickName;
		c_Email = Session.getInstance().user.id;
		c_Purpose = Session.getInstance().user.purpose;
		c_ProfileImagePath = Session.getInstance().user.profileImagePath;
		clonCategoies(Session.getInstance().user.categories);
	}

	private void clonCategoies(ArrayList<Category> categories) {
		for (Category cat : categories){
			Category category = new Category(cat.categoryId,cat.categoryName,cat.categoryDescription);
			c_CategoryList.add(category);
		}
	}

	private void initView() {
		mTv_ProfileImage = (ImageView)findViewById(R.id.activity_profile_thumb_image);
	
		mTv_NickName = (TextView)findViewById(R.id.activity_profile_nickname);
		mTv_Email= (TextView)findViewById(R.id.activity_profile_email);
		mTv_Purpose = (TextView)findViewById(R.id.activity_profile_purpose);
		mTv_MyCategory = (TextView)findViewById(R.id.activity_profile_mycatefories);
		
		mTv_NickName.setText(c_Name);
		mTv_Purpose.setText(c_Purpose);
		mTv_MyCategory.setText(getCategorieStr(c_CategoryList));
		mTv_Email.setText(c_Email);
		
		//세션에 프로파일 이미지 패스가 있다면 다운로드 한다.
		if ( !CommonUtils.isNullOrEmpty(c_ProfileImagePath)){
			   imageLoader.displayImage(Service.BASE_URL+c_ProfileImagePath, mTv_ProfileImage);
		}
	}

	
	private String getCategorieStr(ArrayList<Category> categories) {
		StringBuffer buffer = new StringBuffer();
		for  (int i = 0; i <categories.size(); i++){
				buffer.append(categories.get(i).categoryName);
				buffer.append(" ,");
		}
		String result = buffer.toString();
		if (result.length() > 1){
			buffer.delete(buffer.length()-1,buffer.length());
		}
		return buffer.toString();
	}
	
	private String getParamTypeCategories(ArrayList<Category> categories){
		StringBuffer buffer = new StringBuffer();
		Log.v("선택한 카테고리 수 " , categories.size() + " 개");
		for  (int i = 0; i <categories.size(); i++){
				buffer.append(CommonUtils.int2string(categories.get(i).categoryId));
		}
		return buffer.toString();
	}

	private void initListener() {
		findViewById(R.id.activity_profile_image_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_profile_nickname_btn).setOnClickListener(this);
		findViewById(R.id.activity_profile_email_btn).setOnClickListener(this);
		findViewById(R.id.activity_profile_target_btn).setOnClickListener(this);
		findViewById(R.id.activity_profile_mycategory_btn).setOnClickListener(this);
		((Button)findViewById(R.id.activity_profile_submit_btn)).setOnClickListener(this);
	}
	
	private void getImageFromCamera() {
		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		tmpFile = Environment.getExternalStorageDirectory().getAbsolutePath() +  "/tmp.jpg";
		mImageCaptureUri = Uri.fromFile(new File(tmpFile));
		intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,mImageCaptureUri);
		startActivityForResult(intent,PICK_FROM_CAMERA);
	}

	private void getImageFromAlbum() {
	 	Intent i = new Intent(Intent.ACTION_GET_CONTENT);
		i.setType("image/*");
		getActivity().startActivityForResult(i, PICK_FROM_ALBUM);
	}

	public void onClick(View view) {
		int id = view.getId();
		switch (id) {
		case R.id.activity_profile_image_get_btn:
			showProfileDialog(R.string.selectimage, android.R.drawable.ic_input_add, DIALOG_PROFILE_IMAGE);
			break;
		case R.id.activity_profile_nickname_btn:
			showProfileDialog(R.string.activity_profile_input_nick_text, android.R.drawable.ic_input_add, DIALOG_NICNAME);
			break;
		case R.id.activity_profile_email_btn:
			AndroUtils.showToastMessage(this, R.string.banned_modify_email, Toast.LENGTH_SHORT);
			break;
		case R.id.activity_profile_target_btn:
			showProfileDialog(R.string.activity_profile_input_purpose_text, android.R.drawable.ic_input_add, DIALOG_PURPOSE);
			break;
		case R.id.activity_profile_mycategory_btn:
			showProfileDialog(R.string.activity_profile_input_category_text, android.R.drawable.ic_input_add, DIALOG_MYCATEGOTY);
			break;
		case R.id.activity_profile_submit_btn:
			modifyProfile();
			break;
		}
	}
	
	private void modifyProfile() {
		waitProgressDialog = new SimpleProgressDialog(ProfileActivity.this, getString(R.string.wait_title),
				getString(R.string.wait_message));
		waitProgressDialog.start();
		userService.setOnUserCallback(this);
		userService.modifyProfile(getParamTypeCategories(c_CategoryList), c_Purpose, c_Email, c_Name, imagePath);
	}
	
	public void onUserServiceCallback(BaseResponseObject object) {
		if (waitProgressDialog.isShowing()){
			SimpleProgressDialog.stop(waitProgressDialog);
		}
		if (object.resultCode == Service.RESULT_FAIL) {
			AndroUtils.showToastMessage(ProfileActivity.this, object.requestType + " : " + object.resultMsg, Toast.LENGTH_SHORT);
			return;
		}
		
		switch(object.requestType){
		case Service.REQUEST_TYPE_MODIFY_PROFILE:
			AndroUtils.showToastMessage(ProfileActivity.this, object.requestType + " : " + object.resultMsg, Toast.LENGTH_SHORT);
			Session.getInstance().user.setMyCategoris(getParamTypeCategories(c_CategoryList));
			Session.getInstance().user.purpose = c_Purpose;
			Session.getInstance().user.nickName = c_Name;
			finish();
		break;
		}
		
	}

	private void showProfileDialog(int title, int drawableId, int type) {
		DialogFragment  newFragment = ProfileDialogFragment.newInstance(title, drawableId, type);
		FragmentManager fm = getSupportFragmentManager(); 
		newFragment.show(fm,"dialog");
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data){
		if (resultCode != RESULT_OK)
			return;

		switch (requestCode) {
		case CROP_FROM_CAMERA:
			final Bundle extras = data.getExtras();
			Bitmap photo = null;
			if (extras != null) {
				//Crop 된 이미지는 sdcard에 저장되지 않고, 해당 크랍된 영역의 이미지 데이타를 intent 로 되돌려준다.
				//그래서 Crop된 비트맵을 서버에 전송하기 위해서는 스트림으로 변환을 해야 한다.
				photo = extras.getParcelable("data");
			}
			
			onProfileImageChange(photo, mImageCaptureUri.getPath());
			File f = new File(mImageCaptureUri.getPath());
			//촬영된 원본 이미지를 삭제한다. 만약 이 촬영이미지를 서버에 업로드 하는 경우 삭제하면 안된다.
			//혹은 삭제한다면 생성된 촬영 비트맵이나 crop된 이미지를 스트림으로 변환해야 한다.
			if (f.exists())
				f.delete();
			break;
			
		case PICK_FROM_ALBUM:
			mImageCaptureUri = data.getData();
			imagePath = AndroUtils.getRealImagePath(this, mImageCaptureUri);
			c_ProfileImagePath= imagePath;
			
			File file = new File(imagePath);
			Bitmap cameraBit = AndroUtils.decodeFile(file);
			onProfileImageChange(cameraBit, imagePath);
			break;

		case PICK_FROM_CAMERA:
			Intent intent = new Intent("com.android.camera.action.CROP");
			intent.setDataAndType(mImageCaptureUri, "image/*");

			intent.putExtra("outputX", 90);
			intent.putExtra("outputY", 90);
			intent.putExtra("aspectX", 1);
			intent.putExtra("aspectY", 1);
			intent.putExtra("scale", true);
			intent.putExtra("return-data", true);
			startActivityForResult(intent, CROP_FROM_CAMERA);
			break;
		}
	}
	
	public void onProfileImageChange(Bitmap bit, String path){
		c_ProfileImagePath = path;
		mTv_ProfileImage.setImageBitmap(bit);
	}
	
	public void onNicknameChange(String val){
		c_Name = val.trim();
		mTv_NickName.setText(val.trim());
		
	}
	
	public void onEmailChange(String val){
		c_Email = val.trim();
		mTv_Email.setText(val.trim());
	}

	public void onPurposeChange(String val){
		c_Purpose = val.trim();
		mTv_Purpose .setText(val.trim());
	}
	
	public void onMyCategoryChange(boolean[] selectedCategories){
		c_CategoryList.clear();
		for (int i = 0; i <selectedCategories.length; i++){
			if (selectedCategories[i]){
				Category category = new Category(appCategories.get(i).categoryId,appCategories.get(i).categoryName,"카테고리 설명" );
				c_CategoryList.add(category);
			}
		}
		String resultStr = getCategorieStr(c_CategoryList);
		mTv_MyCategory.setText(resultStr);
	}
	
	
	
	public static class ProfileDialogFragment extends DialogFragment {
        public static ProfileDialogFragment newInstance(int title, int drawableId, int type) {
            ProfileDialogFragment frag = new ProfileDialogFragment();
            Bundle args = new Bundle();
            args.putInt("title", title);
            args.putInt("icon",drawableId);
            args.putInt("type", type);
            frag.setArguments(args);
            return frag;
        }

        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
             setStyle(DialogFragment.STYLE_NO_FRAME, 0);
        }
        
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
        	final LayoutInflater inflator  = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        	final LinearLayout common1 = (LinearLayout)inflator.inflate(R.layout.common_modify, null);
        	
        	final int title = getArguments().getInt("title");
            final int icon = getArguments().getInt("icon");
            final int type = getArguments().getInt("type");
            
            Builder builder = new AlertDialog.Builder(getActivity());
            builder.setTitle(title);
            builder.setIcon(icon);
            
            switch(type){
            case DIALOG_PROFILE_IMAGE:
            	builder.setItems(R.array.profile_imget_get_mthod,new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog,
							int which) {
						if (which == PICK_FROM_ALBUM) {
							((ProfileActivity)getActivity()).getImageFromAlbum();
						} else if (which == PICK_FROM_CAMERA) {
							((ProfileActivity)getActivity()).getImageFromCamera();
						}
					}
				});
            	break;
            case DIALOG_NICNAME:
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(Session.getInstance().user.nickName);
            	builder.setView(common1);
            	break;
            case DIALOG_EMAIL:
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(((ProfileActivity)getActivity()).mTv_Email.getText());
            	((EditText)common1.findViewById(R.id.common_edittext)).setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
            	builder.setView(common1);
            	break;
            case DIALOG_PURPOSE:
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(((ProfileActivity)getActivity()).mTv_Purpose.getText());
            	builder.setView(common1);
            	break;
            case DIALOG_MYCATEGOTY:
            	final boolean[] flags = new boolean[((ProfileActivity)getActivity()).appCategories.size()];
            	final ArrayList<Category> myCategories = ((ProfileActivity)getActivity()).c_CategoryList;
            	final ArrayList<Category> defaultCategories = ((ProfileActivity)getActivity()).appCategories;
            	
            	for (Category cat : myCategories){
            		flags[cat.categoryId-1] = true;
            	}
            	final String[] displayCategoryList =  new String[defaultCategories.size()];
            	
            	for (int i = 0; i <defaultCategories.size(); i++){
            		displayCategoryList[i] = defaultCategories.get(i).categoryName;
            	}
            	builder.setMultiChoiceItems(displayCategoryList, flags, new DialogInterface.OnMultiChoiceClickListener() {
					public void onClick(DialogInterface dialog, int which, boolean isChecked) {
						flags[which] = isChecked;
						
					}
				})
					.setPositiveButton(R.string.confirm, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						((ProfileActivity)getActivity()).onMyCategoryChange(flags);
					}
				})
				.setNegativeButton(R.string.cancel, null);
            	break;
            }
            
            if (type == DIALOG_NICNAME || type == DIALOG_PURPOSE ||  type == DIALOG_EMAIL ){
     	       builder.setPositiveButton(R.string.confirm,
     	                    new DialogInterface.OnClickListener() {
     	                         public void onClick(DialogInterface dialog, int whichButton) {
     	                        	    String val =  ((EditText)common1.findViewById(R.id.common_edittext)).getText().toString();                       
     	                        	    switch(type){
     	                        	 	case DIALOG_NICNAME:
     	                        	 		((ProfileActivity)getActivity()).onNicknameChange(val);
     	                        	 		break;
     	                        	 	case DIALOG_PURPOSE:
     	                        	 		((ProfileActivity)getActivity()).onPurposeChange(val);
     	                        	 		break;
     	                        	 	case DIALOG_EMAIL:
     	                        	 		((ProfileActivity)getActivity()).onEmailChange(val);
     	                        	 		break;
     	                        	 	}                  
     	                         }
     	                      }
     	                    )
     	                    .setNegativeButton(R.string.cancel,null); 
                }

           return builder.create();
        }

    }
	
}
