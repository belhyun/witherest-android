package com.teamteam.witherest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.text.InputType;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.teamteam.witherest.common.AndroUtils;
import com.teamteam.witherest.model.Category;
import com.teamteam.witherest.vo.RoomInfo;

public class MakeRoomActivity extends  FragmentActivity implements View.OnClickListener {

	//현재 액티비티가 방을 새로 만드는 것인지, 방을 수정하기 위해 열린 것인지를 체크하는 변수 
	//0: 방을 새로 만듬 , 1 : 방을 수정함 
	public int mActivityMode= 0;
	
	public RoomInfo mRoomInfo;
	public ArrayList<Category> mCategoryList;
	
	private ImageView mIv_roomImage;
	private TextView mTv_roomName;
	private TextView mTv_roomPurpose;
	private TextView mTv_roomCategory;
	private TextView mTv_roomPeriod;
	private TextView mTv_rooomPeriodType;
	private TextView mTv_roomAlarm;
	private TextView mTv_roomAlarmTime;
	private TextView mTv_roomPublic;
	private TextView mTv_roomMaxMember;
	
	private boolean isDialogOpend = false;
	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
	
	public static final int DEFAULT_ALARM_HOUR= 12;
	public static final int DEFAULT_ALARM_MINUTE= 0;
	//다이알로그 생성 변수 
	public static final int DIALOG_ROOMNAME = 1;        
	public static final int DIALOG_PURPOSE = 2;        
	public static final int DIALOG_LIST_CATEGORY = 3;    
	public static final int DIALOG_LIST_PUBLIC = 4;         
	public static final int DIALOG_TIME = 5;                 
	public static final int DIALOG_ALARM = 6;              
	public static final int DIALOG_PERIOD = 7;              
	public static final int DIALOG_PERIODTYPE = 8;        
	public static final int DIALOG_IMAGE_GET = 9;
	public static final int DIALOG_MAXMEMBERS = 10;
	public static final int DIALOG_DATESELECT = 11;
	
	//방 이미지 변경을 위한 변수로, 갤러리, 카메라, 크랍인텐트를 나타냄
	public static final int PICK_FROM_ALBUM = 0;
	public static final int PICK_FROM_CAMERA = 1;
	public static final int CROP_FROM_CAMERA = 2;
	
	
	public static String tmpImagePath ;
	public static Uri mImageCaptureUri;
	
	//현재 액티비티의 생성 모드 
	public static final int ROOM_NEW =0;
	public static final int ROOM_MODIFY = 1;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_makeroom);
		Intent i = getIntent();
		
		if (i != null) {
			mActivityMode = i.getIntExtra("mode", ROOM_NEW);
		}
		
		initInstance();
		initForm();
		initListener();
	}
	
	private void initInstance(){
		if (mActivityMode == ROOM_NEW){
			mRoomInfo = new RoomInfo();
		}else if (mActivityMode==ROOM_MODIFY){
			//방 수정으로 서버로 부터 방정보를 받아와 RoomInfo  객체를 할당한다.
		}
		
		//카테고리는 서버로 부터 받아와야 하지만, 일단 테스트를 위하여 더미 카테고리를 생성한다.
		mCategoryList = getDummyCategories();
	}
	
	
	private ArrayList<Category> getDummyCategories() {
		ArrayList<Category> cateList = new ArrayList<Category>();
		String[] categories = getResources().getStringArray(R.array.category);
		for (int i = 0; i < 8 ; i++){
			Category category = new Category(i,categories[i], "카테고리 설명입니다");
			cateList.add(category);
		}
		return cateList;
	}

	private boolean[] convertTypeToArray(String periodType) {
		boolean[] tmpArray = new boolean[7];
		for (int i = 1; i < periodType.length(); i++){
			tmpArray[i-1] = periodType.charAt(i) == '1'? true:false;
		}
		return tmpArray;
	}

	private void initForm(){
		mIv_roomImage =   (ImageView)findViewById(R.id.activity_makeroom_thumb_image);
		mTv_roomName =    (TextView)findViewById(R.id.activity_makeroom_roomname_textview);
		mTv_roomPurpose = (TextView)findViewById(R.id.activity_makeroom_purpose_textview);
		mTv_roomCategory = (TextView)findViewById(R.id.activity_makeroom_category_textview);
		mTv_roomPeriod =    (TextView)findViewById(R.id.activity_makeroom_period_textview);
		mTv_rooomPeriodType = (TextView)findViewById(R.id.activity_makeroom_periodtype_textview);
		mTv_roomAlarm = (TextView)findViewById(R.id.activity_makeroom_alarm_textview);
		mTv_roomAlarmTime = (TextView)findViewById(R.id.activity_makeroom_alarmtime_textview);
		mTv_roomPublic = (TextView)findViewById(R.id.activity_makeroom_public_textview);
		mTv_roomMaxMember = (TextView)findViewById(R.id.activity_makeroom_maxmember_textview);
		mTv_roomPeriod.setText(dateFormat.format(mRoomInfo.startDate) + "~" + (mRoomInfo.endDate != null? dateFormat.format(mRoomInfo.endDate) : ""));
		
		String displayperiodType = getDisplayStringFromPeriodType(mRoomInfo.periodType);
		
		mTv_rooomPeriodType.setText(displayperiodType);
		mTv_roomAlarm.setText(getResources().getStringArray(R.array.alarm_array)[mRoomInfo.alarmLevel]);
		mTv_roomAlarmTime.setText(getTimeToString(mRoomInfo.alarmHour, mRoomInfo.alarmMin, mRoomInfo.is24Time));
		mTv_roomPublic.setText(getResources().getStringArray(R.array.public_array)[mRoomInfo.publicLevel]);
		mTv_roomMaxMember.setText(mRoomInfo.maxMember + getResources().getString(R.string.unit_human));
	}


	public String getTimeToString(int hour, int minute, boolean is24HourView){
		return is24HourView?  hour +  getResources().getString(R.string.simple_time) + minute + 
				getResources().getString(R.string.simple_min) :
					(hour > 12 ? getResources().getString(R.string.pm) + " " + (hour -12) +  getResources().getString(R.string.simple_time) + minute + 
				getResources().getString(R.string.simple_min):
					getResources().getString(R.string.am) + " " +   hour + getResources().getString(R.string.simple_time) + minute + 
					getResources().getString(R.string.simple_min));
	}
	
	private String getDisplayStringFromPeriodType(String periodType){
		StringBuffer periodTypeBuffer = new StringBuffer();
		if (mRoomInfo.periodTypeMode == RoomInfo.SELECT_DAILY_MODE) return getResources().getString(R.string.daily);
		for (int i = 1; i <periodType.length(); i++){
			if ( periodType.charAt(i) == '1'){
				periodTypeBuffer.append(getResources().getStringArray(R.array.makeroom_simple_weekends_array)[i-1]);
				periodTypeBuffer.append(" ,");
			}
		}
		
		String result = periodTypeBuffer.toString();
		if (result.length() > 1){
			periodTypeBuffer.delete(periodTypeBuffer.length()-1,periodTypeBuffer.length());
		}
		
		return periodTypeBuffer.toString();
	}
	private void initListener(){
		findViewById(R.id.activity_makeroom_image_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_roomname_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_purpose_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_category_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_period_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_periodtype_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_alarm_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_alarmtime_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_public_get_btn).setOnClickListener(this);
		findViewById(R.id.activity_makeroom_maxmember_get_btn).setOnClickListener(this);
	}

	public void onClick(View view) {
		if (isDialogOpend) return;
		switch(view.getId()){
		//방이미지  대화장 
		case R.id.activity_makeroom_image_get_btn:
			showSettingDialog(R.string.selectimage,android.R.drawable.ic_input_add, DIALOG_IMAGE_GET);
			break;	
			
		//방 타이틀  대화창 
		case R.id.activity_makeroom_roomname_get_btn:
			showSettingDialog(R.string.dialog_input_roomname_text,android.R.drawable.ic_input_add, DIALOG_ROOMNAME);
			break;		
			
		//방 목표 대화창 
		case R.id.activity_makeroom_purpose_get_btn:
			showSettingDialog(R.string.dialog_input_purpose_text,android.R.drawable.ic_input_add, DIALOG_PURPOSE);
			break;		
			
		//방 카테고리  대화창
		case R.id.activity_makeroom_category_get_btn:
			showSettingDialog(R.string.dialog_input_category_text,android.R.drawable.ic_input_add, DIALOG_LIST_CATEGORY);
			break;		
			
		//기간 대화창 
		case R.id.activity_makeroom_period_get_btn:
			showSettingDialog(R.string.dialog_input_period_text,android.R.drawable.ic_input_add, DIALOG_PERIOD);
			break;		
			
		//실천 주기 대화창
		case R.id.activity_makeroom_periodtype_get_btn:
			showSettingDialog(R.string.dialog_input_periodtype_text,android.R.drawable.ic_input_add, DIALOG_PERIODTYPE);
			break;		
			
		//알림 여부 대화창
		case R.id.activity_makeroom_alarm_get_btn:
			showSettingDialog(R.string.dialog_input_alarm_text,android.R.drawable.ic_input_add, DIALOG_ALARM);
			break;		
			
		//알람 시간 대화창
		case R.id.activity_makeroom_alarmtime_get_btn:
			showSettingDialog(R.string.dialog_input_maxmember_text,android.R.drawable.ic_input_add, DIALOG_TIME);
			break;		
			
		//공개 여부 대화창
		case R.id.activity_makeroom_public_get_btn:
			showSettingDialog(R.string.dialog_input_maxmember_text,android.R.drawable.ic_input_add, DIALOG_LIST_PUBLIC);
			break;		
			
		//참여 인원 대화창 
		case R.id.activity_makeroom_maxmember_get_btn:
			showSettingDialog(R.string.dialog_input_maxmember_text,android.R.drawable.ic_input_add, DIALOG_MAXMEMBERS);
			break;
		}
	}

	private void showSettingDialog(int title, int drawableId, int type) {
		DialogFragment  newFragment = MakeRoomSettingDialogFragment.newInstance(title, drawableId, type);
		FragmentManager fm = getSupportFragmentManager(); 
		newFragment.show(fm,"dialog");
	}


	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data){
		if (resultCode != RESULT_OK)
			return;

		switch (requestCode) {
		case CROP_FROM_CAMERA:
			final Bundle extras = data.getExtras();
			Bitmap photo = null;
			if (extras != null) {
				//Crop 된 이미지는 sdcard에 저장되지 않고, 해당 크랍된 영역의 이미지 데이타를 intent 로 되돌려준다.
				//그래서 Crop된 비트맵을 서버에 전송하기 위해서는 스트림으로 변환을 해야 한다.
				photo = extras.getParcelable("data");
			}
			
			onRoomImageChange(photo, mImageCaptureUri.getPath());
			File f = new File(mImageCaptureUri.getPath());
			//촬영된 원본 이미지를 삭제한다. 만약 이 촬영이미지를 서버에 업로드 하는 경우 삭제하면 안된다.
			//혹은 삭제한다면 생성된 촬영 비트맵이나 crop된 이미지를 스트림으로 변환해야 한다.
			if (f.exists())
				f.delete();
			break;
			
		case PICK_FROM_ALBUM:
			mImageCaptureUri = data.getData();
			tmpImagePath = AndroUtils.getRealImagePath(this, mImageCaptureUri);
			
			File file = new File(tmpImagePath);
			Bitmap cameraBit = AndroUtils.decodeFile(file);
			onRoomImageChange(cameraBit, tmpImagePath);
			break;

		case PICK_FROM_CAMERA:
			Intent intent = new Intent("com.android.camera.action.CROP");
			intent.setDataAndType(mImageCaptureUri, "image/*");

			intent.putExtra("outputX", 90);
			intent.putExtra("outputY", 90);
			intent.putExtra("aspectX", 1);
			intent.putExtra("aspectY", 1);
			intent.putExtra("scale", true);
			intent.putExtra("return-data", true);
			startActivityForResult(intent, CROP_FROM_CAMERA);
			break;
		}
	}
	
	public void onRoomImageChange(Bitmap bit, String path){
		mRoomInfo.roomImagePath = path;
		mIv_roomImage.setImageBitmap(bit);
	}
	
	public void onRoomNameChange(String val){
		mRoomInfo.roomName = val;
		mTv_roomName.setText(val);
	}
	
	public void onRoomPurposeChange(String val){
		mRoomInfo.purpose = val;
		mTv_roomPurpose.setText(val);

	}

	public void onRoomMaxMemberChange(String val){
		mRoomInfo.maxMember= Integer.parseInt(val.trim());
		mTv_roomMaxMember.setText(val + getResources().getString(R.string.unit_human));
	}
	
	public void onRoomCategoryChange(int pos){
		mRoomInfo.category = mCategoryList.get(pos);
		mTv_roomCategory.setText(getResources().getStringArray(R.array.category)[pos]);
	}
	
	public void onRoomPublicLevelChange(int pos){
		mRoomInfo.publicLevel = pos;
		mTv_roomPublic.setText(getResources().getStringArray(R.array.public_array)[pos]);
	}
	
	public void onRoomAlarmLevelChange(int pos){
		mRoomInfo.alarmLevel = pos;
		mTv_roomAlarm.setText(getResources().getStringArray(R.array.alarm_array)[pos]);
	}
	
	public void onRoomPeriodChange(String val){
		if (val.trim().length90 < 1 || val == null || val =="") return;
		int period = Integer.parseInt(val);
		Calendar cal = Calendar.getInstance();
		cal.setTime(mRoomInfo.startDate);
		cal.add(Calendar.DATE, period);
		mRoomInfo.endDate = cal.getTime();
		
		mTv_roomPeriod.setText(dateFormat.format(mRoomInfo.startDate) + " ~ " + dateFormat.format(mRoomInfo.endDate ));
	}
	
	public void onRoomPeriodChange(int pos){
		int period = Integer.parseInt(getResources().getStringArray(R.array.makeroom_period_int_array)[pos]);
		Calendar cal = Calendar.getInstance();
		cal.setTime(mRoomInfo.startDate);
		cal.add(Calendar.DATE, period);
		mRoomInfo.endDate = cal.getTime();
		
		mTv_roomPeriod.setText(dateFormat.format(mRoomInfo.startDate) + " ~ " + dateFormat.format(mRoomInfo.endDate ));
	}
	
	public void onRoomPeriodTypeChange(){
		mRoomInfo.periodTypeMode = RoomInfo.SELECT_DAILY_MODE;
		mRoomInfo.periodType = "10000000";
	
		String s = getDisplayStringFromPeriodType(mRoomInfo.periodType);
		mTv_rooomPeriodType.setText(s);
	}
	
	public void onRoomPeriodTypeChange(boolean[] boolArr){
		mRoomInfo.periodTypeMode = RoomInfo.SELECT_DATE_MODE;
		mRoomInfo.periodType = getPeriodtype(boolArr);
		
		String diplayStr = getDisplayStringFromPeriodType(mRoomInfo.periodType);
		mTv_rooomPeriodType.setText(diplayStr);
	}
	
	public void onRoomAlarmTimeChange(int hour, int minute, boolean is24HourView){
		mRoomInfo.is24Time = is24HourView;
		mRoomInfo.alarmHour= hour;
		mRoomInfo.alarmMin = minute;
		String displayText  =getTimeToString(hour,minute, is24HourView);
		
	mTv_roomAlarmTime.setText(displayText);
	}

	
	private String getPeriodtype(boolean[] boolArr) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("0");
		for (int i = 0; i < boolArr.length; i++){
			 buffer.append(boolArr[i] == true?"1":"0");
		}
		return buffer.toString();
	}

	public static class MakeRoomSettingDialogFragment extends DialogFragment {
        public static MakeRoomSettingDialogFragment newInstance(int title, int drawableId, int type) {
            MakeRoomSettingDialogFragment frag = new MakeRoomSettingDialogFragment();
            Bundle args = new Bundle();
            args.putInt("title", title);
            args.putInt("icon",drawableId);
            args.putInt("type", type);
            frag.setArguments(args);
            return frag;
        }

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
        	final LayoutInflater inflator  = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        	final LinearLayout common1 = (LinearLayout)inflator.inflate(R.layout.common_modify, null);
        	
        	final int title = getArguments().getInt("title");
            final int icon = getArguments().getInt("icon");
            final int type = getArguments().getInt("type");
            
            Builder builder = new AlertDialog.Builder(getActivity());
            builder.setTitle(title);
            builder.setIcon(icon);
            
            switch(type){
            case DIALOG_IMAGE_GET:
            	builder.setItems(R.array.profile_imget_get_mthod,new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog,
							int which) {
						if (which == PICK_FROM_ALBUM) {
							getImageFromAlbum();
						} else if (which == PICK_FROM_CAMERA) {
							getImageFromCamera();
						}
					}
				});
            	break;
            	
            case DIALOG_ROOMNAME:
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(((MakeRoomActivity)getActivity()).mRoomInfo.roomName);
            	builder.setView(common1);
            	break;
            	
            case DIALOG_MAXMEMBERS:
            	((EditText)common1.findViewById(R.id.common_edittext)).setInputType(InputType.TYPE_CLASS_NUMBER);
            	String val = String.valueOf(((MakeRoomActivity)getActivity()).mRoomInfo.maxMember);
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(val);
            	builder.setView(common1);
            	break;
            	
            case DIALOG_PURPOSE:
            	((EditText)common1.findViewById(R.id.common_edittext)).setText(((MakeRoomActivity)getActivity()).mRoomInfo.purpose);
            	builder.setView(common1);
            	break;
            	
            case DIALOG_ALARM:
            	builder.setItems(R.array.alarm_array, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						((MakeRoomActivity)getActivity()).onRoomAlarmLevelChange(which);
					}
				});
            	break;
            	
            case DIALOG_LIST_CATEGORY:
            	builder.setItems(R.array.category, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						((MakeRoomActivity)getActivity()).onRoomCategoryChange(which);	
					}
				});
            	break;
            	
            case DIALOG_LIST_PUBLIC:
            	builder.setItems(R.array.public_array, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						((MakeRoomActivity)getActivity()).onRoomPublicLevelChange(which);
					}
				});
            	break;
            	
            case DIALOG_TIME:
            	Calendar cal = new GregorianCalendar();
            	int hour = cal.get(Calendar.HOUR_OF_DAY);
            	int min = cal.get(Calendar.MINUTE);
            	return new TimePickerDialog(getActivity(), new TimePickerDialog.OnTimeSetListener() {
        			public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
        				((MakeRoomActivity)getActivity()).onRoomAlarmTimeChange(hourOfDay, minute,view.is24HourView());
        			}
        		}, hour, min, ((MakeRoomActivity)getActivity()).mRoomInfo.is24Time);	
            
            case DIALOG_PERIOD:
            	final LinearLayout periodLayout = (LinearLayout)inflator.inflate(R.layout.activity_makeroom_period_select, null);
            	final RadioGroup group = (RadioGroup)periodLayout.findViewById(R.id.radiogroup_period);
            	final ListView list = (ListView)periodLayout.findViewById(R.id.makeroom_period_list);
            	final RelativeLayout directLayout = (RelativeLayout)periodLayout.findViewById(R.id.direct_input_layout);
            	final EditText periodText = (EditText)periodLayout.findViewById(R.id.periodeditText);
            	periodText.setInputType(InputType.TYPE_CLASS_NUMBER);
            	
            	final Button periodButton = (Button)periodLayout.findViewById(R.id.periodbutton);
            	periodButton.setOnClickListener(new OnClickListener() {
					public void onClick(View view) {
						dismiss();
						((MakeRoomActivity)getActivity()).onRoomPeriodChange(periodText.getText().toString());	
					}
				});
            	
            	group.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
					public void onCheckedChanged(RadioGroup group, int checkedId) {
						list.setVisibility(View.GONE);
						directLayout.setVisibility(View.GONE);
						switch(checkedId){
						case R.id.list_radioButton:
							list.setVisibility(View.VISIBLE);
							break;
						case R.id.directradioButton:
							directLayout.setVisibility(View.VISIBLE);
							break;
						}		
					}
				});
            	
            	ArrayAdapter<CharSequence> adpater = ArrayAdapter.createFromResource(getActivity(), R.array.makeroom_period_array,
            			android.R.layout.simple_list_item_1);
            	 list.setAdapter(adpater);
            	 list.setOnItemClickListener(new AdapterView.OnItemClickListener() {

					public void onItemClick(AdapterView<?> arg0, View view,int position, long id) {
						dismiss();
						((MakeRoomActivity)getActivity()).onRoomPeriodChange(position);
					} 
				});
            	builder.setView(periodLayout);
            	break;
            
            case DIALOG_DATESELECT:
            	final boolean[] tmpArr = ((MakeRoomActivity)getActivity()).convertTypeToArray(((MakeRoomActivity)getActivity()).mRoomInfo.periodType);
            	
            	builder.setMultiChoiceItems(R.array.makeroom_weekends_array, tmpArr ,new DialogInterface.OnMultiChoiceClickListener() {
					public void onClick(DialogInterface dialog, int which, boolean isChecked) {
						tmpArr[which] = isChecked;
					}
				})
				.setPositiveButton(R.string.confirm, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						((MakeRoomActivity)getActivity()).onRoomPeriodTypeChange(tmpArr);
					}
				})
				.setNegativeButton(R.string.cancel, null);
            	break;
            	
            case DIALOG_PERIODTYPE:
            	builder.setItems(R.array.makeroom_periodtype_array,new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						if (which == 0){
							((MakeRoomActivity)getActivity()).onRoomPeriodTypeChange();
						}else {
							((MakeRoomActivity)getActivity()).showSettingDialog(R.string.request_select_day, 
									android.R.drawable.ic_input_add, DIALOG_DATESELECT);
						}
						
					}
				});
            	break;
            }
            
           if (type == DIALOG_ROOMNAME || type == DIALOG_PURPOSE ||  type == DIALOG_MAXMEMBERS){
	       builder.setPositiveButton(R.string.confirm,
	                    new DialogInterface.OnClickListener() {
	                         public void onClick(DialogInterface dialog, int whichButton) {
	                        	    String val =  ((EditText)common1.findViewById(R.id.common_edittext)).getText().toString();                       
	                        	    switch(type){
	                        	 	case DIALOG_ROOMNAME:
	                        	 		((MakeRoomActivity)getActivity()).onRoomNameChange(val);
	                        	 		break;
	                        	 	case DIALOG_PURPOSE:
	                        	 		((MakeRoomActivity)getActivity()).onRoomPurposeChange(val);
	                        	 		break;
	                        	 	case DIALOG_MAXMEMBERS:
	                        	 		((MakeRoomActivity)getActivity()).onRoomMaxMemberChange(val);
	                        	 		break;
	                        	 	}                  
	                         }
	                      }
	                    )
	                    .setNegativeButton(R.string.cancel,null); 
           }
          
           return builder.create();
        }

        private void getImageFromCamera() {
    		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    		tmpImagePath = "tmp_" + String.valueOf(System.currentTimeMillis())+ ".jpg";
    		mImageCaptureUri = Uri.fromFile(new File(Environment.getExternalStorageDirectory(), tmpImagePath));
    		intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,mImageCaptureUri);
    		getActivity().startActivityForResult(intent,PICK_FROM_CAMERA);
    	}

    	private void getImageFromAlbum() {
    		Intent i = new Intent(Intent.ACTION_GET_CONTENT);
    		i.setType("image/*");
    		getActivity().startActivityForResult(i, PICK_FROM_ALBUM);
    	}
    }
}
